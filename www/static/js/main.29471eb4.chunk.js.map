{"version":3,"sources":["video/video-plus/youtube.ts","video/video-plus/index.ts","video/app.ts","video/event.ts","video/channel-page/channel-playlists.tsx","video/channel-page/channel-subscription.tsx","video/channel-page/channel-videos.tsx","video/components/PlayButton/index.tsx","video/components/SlideShow/index.tsx","video/channel-page/home.tsx","video/channel-page/index.tsx","video/components/PlayListsHorizontal/index.tsx","video/channels.tsx","video/components/CategoriesTab/TabCategory.tsx","video/components/CategoriesTab/index.tsx","video/home.tsx","video/components/Comments/CommentItem.component.tsx","video/components/Comments/index.tsx","video/playlist.tsx","video/search.tsx","video/components/VideoInfoBox/index.tsx","video/video.tsx","video/routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fromYoutubeChannels","res","items","filter","i","snippet","map","item","thumbnail","thumbnails","id","title","description","publishedAt","Date","customUrl","country","localizedTitle","localized","localizedDescription","default","url","undefined","mediumThumbnail","medium","highThumbnail","high","contentDetails","relatedPlaylists","r","likes","favorites","uploads","fromYoutubeSearch","list","channelId","channelTitle","liveBroadcastContent","publishTime","videoId","kind","playlistId","total","pageInfo","totalResults","limit","resultsPerPage","nextPageToken","buildShownItems","keyword","all","includeDescription","w","toLowerCase","includes","toLocaleLowerCase","VideoClient","httpRequest","maxChannel","maxPlaylist","key","channelCache","playlistCache","getCommentThreads","getComments","getSubcriptions","this","getCagetories","bind","getChannels","getChannel","getChannelPlaylists","getPlaylists","getPlaylist","getPlaylistVideos","getChannelVideos","getPopularVideos","getPopularVideosByRegion","getPopularVideosByCategory","getVideos","getVideo","search","getRelatedVideos","searchVideos","searchPlaylists","searchChannels","length","sort","max","mine","regionCode","get","ids","fields","join","then","formatPublishedAt","c","Promise","resolve","field","channel","timestamp","removeCache","catch","err","data","response","status","maxResults","pageToken","decompressItems","playlist","decompress","videoCategoryId","regionParam","categoryParam","noSnippet","video","sm","searchType","type","searchDuration","duration","searchOrder","q","formatThumbnail","cache","keys","Object","lastKey","count","last","obj","getTime","nothumbnail","t","thumbnailNames","a","u","li","request","mineStr","orderParam","sn","topLevelComment","textDisplay","textOriginal","authorDisplayName","authorProfileImageUrl","authorChannelUrl","authorChannelId","value","canRate","viewerRating","likeCount","updatedAt","canReply","totalReplyCount","isPublic","fromYoutubeCommentThreads","parentId","fromYoutubeComments","HttpRequest","axios","context","videoService","viewVideo","e","history","preventDefault","push","viewPlaylist","viewChannel","playlistFields","ChannelPlayLists","useParams","useHistory","getVideoService","React","setKeyword","playlists","setPlaylists","allPlaylists","setAllPlaylists","setNextPageToken","handleLoadMore","newList","concat","name","className","onChange","word","target","maxLength","style","backgroundImage","href","onClick","toDateString","ChannelSubscriptions","setData","loadMore","x","src","alt","videoFields","ChannelVideos","videos","setVideos","allVideos","setAllVideos","definition","s","PlayButtonCustom","version","xmlns","xmlnsXlink","y","viewBox","enableBackground","xmlSpace","fill","strokeWidth","strokeMiterlimit","d","stroke","cx","cy","CustomSlideShow","props","thumbnailSize","currentIndex","setCurrentIndex","play","setPlay","setLength","fetching","setFetching","width","onMouseEnter","prevState","transform","index","height","allow","Home","zIndex","channelFields","ChannelPage","selectTab","setSelectTab","setChannel","console","log","tabId","tabName","getState","setState","Tab","toLocaleUpperCase","PlayListsHorizontal","view","ChannelsForm","channels","setChannels","paddingLeft","TabCategory","setSelectedTab","htmlFor","CategoriesTab","ref","previousBtnHide","setPreviousBtnHide","nextBtnHide","setNextBtnHide","scroll","scrollOffset","current","scrollLeft","scrollMaxWidth","scrollWidth","clientWidth","assignable","getRegion","l","locale","countryCode","HomeForm","videoCategories","setVideoCategories","selectedCategory","setSelectedCategory","region","CommentItem","comment","getComment","comments","setComments","show","setShow","nextPage","setNextPage","commentId","dangerouslySetInnerHTML","__html","Comments","commentThreads","setCommentThreads","order","tools","setTools","prev","handleSort","newThreads","defaultValue","PlaylistForm","resource","keywordOnChanged","state","buildId","formatToMinutes","back","window","addEventListener","document","scrollingElement","scrollHeight","goBack","placeholder","role_assignment_search_user","button_more","minHeight","allowFullScreen","itemFields","SearchForm","storage","setFilter","handleFilterType","pre","handleFilterDuration","videoDuration","handleFilterOrder","welcome_title","disabled","VideoInfoBox","collapsed","setCollapsed","perPage","reduce","b","VideoForm","listRelated","setListRelated","setVideo","page","setPage","sliceData","setSliceData","resVideo","resRelatedVideo","slice","paddingTop","begin","end","StatelessApp","path","match","exact","component","VideoRoutes","compose","withRouter","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","getElementById","cordova"],"mappings":"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","file":"static/js/main.29471eb4.chunk.js","sourcesContent":["import {CategorySnippet, Channel, ChannelDetail, ChannelSnippet, Item, ListDetail, ListItem, ListResult, Playlist, PlaylistSnippet, PlaylistVideo, PlaylistVideoSnippet, SearchId, SearchSnippet, StringMap, Video, VideoCategory, VideoItemDetail, VideoSnippet, YoutubeListResult, YoutubeVideoDetail} from './models';\nexport * from './models';\nexport * from './comment';\n\nexport function calculateDuration(d: string): number {\n  if (!d) {\n    return 0;\n  }\n  const k = d.split('M');\n  if (k.length < 2) {\n    return 0;\n  }\n  const a = k[1].substr(0, k[1].length - 1);\n  const x = k[0].split('H');\n  const b = (x.length === 1 ? k[0].substr(2) : x[1]);\n  if (!isNaN(a as any) && !isNaN(b as any)) {\n    const a1 = parseFloat(a);\n    const a2 = parseFloat(b);\n    if (x.length === 1) {\n      return a2 * 60 + a1;\n    } else {\n      const c = x[0].substr(2);\n      if (!isNaN(c as any)) {\n        const a3 = parseFloat(c);\n        return a3 * 3600 + a2 * 60 + a1;\n      } else {\n        return 0;\n      }\n    }\n  }\n  return 0;\n}\n// date, rating, relevance, title, videoCount (for channels), viewCount (for live broadcast) => title, date => publishedAt, relevance => rank, count => videoCount\nexport const youtubeSortMap: StringMap = {\n  publishedAt: 'date',\n  rank: 'rating',\n  count: 'videoCount'\n};\nexport function getYoutubeSort(s: string): string {\n  if (!s || s.length === 0) {\n    return undefined;\n  }\n  const s2 = youtubeSortMap[s];\n  if (s2) {\n    return s2;\n  }\n  if (s === 'date' || s === 'rating' || s === 'title' || s === 'videoCount' || s === 'viewCount') { // s === 'relevance'\n    return s;\n  }\n  return undefined;\n}\nexport function fromYoutubeCategories(res: YoutubeListResult<ListItem<string, CategorySnippet, any>>): VideoCategory[] {\n  return res.items.filter(i => i.snippet).map(item => {\n    const snippet = item.snippet;\n    const i: VideoCategory = {\n      id: item.id,\n      title: snippet.title,\n      assignable: snippet.assignable,\n      channelId: snippet.channelId\n    };\n    return i;\n  });\n}\nexport function fromYoutubeChannels(res: YoutubeListResult<ListItem<string, ChannelSnippet, ChannelDetail>>): Channel[] {\n  return res.items.filter(i => i.snippet).map(item => {\n    const snippet = item.snippet;\n    const thumbnail = snippet.thumbnails;\n    const i: Channel = {\n      id: item.id,\n      title: snippet.title,\n      description: snippet.description,\n      publishedAt: new Date(snippet.publishedAt),\n      customUrl: snippet.customUrl,\n      country: snippet.country,\n      localizedTitle: snippet.localized ? snippet.localized.title : '',\n      localizedDescription: snippet.localized ? snippet.localized.description : ''\n    };\n    if (thumbnail) {\n      i.thumbnail = thumbnail.default ? thumbnail.default.url : undefined;\n      i.mediumThumbnail = thumbnail.medium ? thumbnail.medium.url : undefined;\n      i.highThumbnail = thumbnail.high ? thumbnail.high.url : undefined;\n    }\n    if (item.contentDetails && item.contentDetails.relatedPlaylists) {\n      const r = item.contentDetails.relatedPlaylists;\n      i.likes = r.likes;\n      i.favorites = r.favorites;\n      i.uploads = r.uploads;\n    }\n    return i;\n  });\n}\n\nexport function fromYoutubePlaylists(res: YoutubeListResult<ListItem<string, PlaylistSnippet, ListDetail>>): ListResult<Playlist> {\n  const list = res.items.filter(i => i.snippet).map(item => {\n    const snippet = item.snippet;\n    const thumbnail = snippet.thumbnails;\n    const i: Playlist = {\n      id: item.id,\n      title: snippet.title,\n      localizedTitle: snippet.localized ? snippet.localized.title : '',\n      localizedDescription: snippet.localized ? snippet.localized.description : '',\n      description: snippet.description,\n      publishedAt: new Date(snippet.publishedAt),\n      channelId: snippet.channelId,\n      channelTitle: snippet.channelTitle,\n      count: item.contentDetails ? item.contentDetails.itemCount : 0\n    };\n    if (thumbnail) {\n      i.thumbnail = thumbnail.default ? thumbnail.default.url : undefined;\n      i.mediumThumbnail = thumbnail.medium ? thumbnail.medium.url : undefined;\n      i.highThumbnail = thumbnail.high ? thumbnail.high.url : undefined;\n      i.standardThumbnail = thumbnail.standard ? thumbnail.standard.url : undefined;\n      i.maxresThumbnail = thumbnail.maxres ? thumbnail.maxres.url : undefined;\n    }\n    return i;\n  });\n  return { list, total: res.pageInfo.totalResults, limit: res.pageInfo.resultsPerPage, nextPageToken: res.nextPageToken };\n}\nexport function fromYoutubePlaylist(res: YoutubeListResult<ListItem<string, PlaylistVideoSnippet, VideoItemDetail>>): ListResult<PlaylistVideo> {\n  const list = res.items.filter(i => i.snippet).map(item => {\n    const snippet = item.snippet;\n    const thumbnail = snippet.thumbnails;\n    const content = item.contentDetails;\n    const i: PlaylistVideo = {\n      title: snippet.title ? snippet.title : '',\n      description: snippet.description ? snippet.description : '',\n      localizedTitle: snippet.localized ? snippet.localized.title : '',\n      localizedDescription: snippet.localized ? snippet.localized.description : '',\n      channelId: snippet.channelId ? snippet.channelId : '',\n      channelTitle: snippet.channelTitle ? snippet.channelTitle : '',\n      id: content ? content.videoId : '',\n      publishedAt: content ? new Date(content.videoPublishedAt) : undefined,\n      playlistId: snippet.playlistId ? snippet.playlistId : '',\n      position: snippet.position ? snippet.position : 0,\n      videoOwnerChannelId: snippet.videoOwnerChannelId ? snippet.videoOwnerChannelId : '',\n      videoOwnerChannelTitle: snippet.videoOwnerChannelTitle ? snippet.videoOwnerChannelTitle : ''\n    };\n    if (thumbnail) {\n      i.thumbnail = thumbnail.default ? thumbnail.default.url : undefined;\n      i.mediumThumbnail = thumbnail.medium ? thumbnail.medium.url : undefined;\n      i.highThumbnail = thumbnail.high ? thumbnail.high.url : undefined;\n      i.standardThumbnail = thumbnail.standard ? thumbnail.standard.url : undefined;\n      i.maxresThumbnail = thumbnail.maxres ? thumbnail.maxres.url : undefined;\n    }\n    return i;\n  });\n  return { list, total: res.pageInfo.totalResults, limit: res.pageInfo.resultsPerPage, nextPageToken: res.nextPageToken };\n}\nexport function fromYoutubeSearch(res: YoutubeListResult<ListItem<SearchId, SearchSnippet, any>>): ListResult<Item> {\n  const list = res.items.filter(i => i.snippet).map(item => {\n    const snippet = item.snippet;\n    const thumbnail = snippet.thumbnails;\n    const i: Item = {\n      title: snippet.title ? snippet.title : '',\n      description: snippet.description ? snippet.description : '',\n      publishedAt: new Date(snippet.publishedAt),\n      channelId: snippet.channelId ? snippet.channelId : '',\n      channelTitle: snippet.channelTitle ? snippet.channelTitle : '',\n      liveBroadcastContent: snippet.liveBroadcastContent,\n      publishTime: new Date(snippet.publishTime),\n    };\n    if (thumbnail) {\n      i.thumbnail = thumbnail.default ? thumbnail.default.url : undefined;\n      i.mediumThumbnail = thumbnail.medium ? thumbnail.medium.url : undefined;\n      i.highThumbnail = thumbnail.high ? thumbnail.high.url : undefined;\n    }\n    const id = item.id;\n    if (id) {\n      if (id.videoId) {\n        i.id = id.videoId;\n        i.kind = 'video';\n      } else if (id.channelId) {\n        i.id = id.channelId;\n        i.kind = 'channel';\n      } else if (id.playlistId) {\n        i.id = id.playlistId;\n        i.kind = 'playlist';\n      }\n    }\n    return i;\n  });\n  return { list, total: res.pageInfo.totalResults, limit: res.pageInfo.resultsPerPage, nextPageToken: res.nextPageToken };\n}\nexport function fromYoutubeVideos(res: YoutubeListResult<ListItem<string, VideoSnippet, YoutubeVideoDetail>>): ListResult<Video> {\n  const list = res.items.map(item => {\n    const snippet = item.snippet;\n    const content = item.contentDetails;\n    if (snippet) {\n      const thumbnail = snippet.thumbnails;\n      const i: Video = {\n        id: item.id,\n        title: snippet.title,\n        publishedAt: new Date(snippet.publishedAt),\n        description: snippet.description,\n        localizedTitle: snippet.localized ? snippet.localized.title : '',\n        localizedDescription: snippet.localized ? snippet.localized.description : '',\n        channelId: snippet.channelId,\n        channelTitle: snippet.channelTitle,\n        tags: snippet.tags,\n        categoryId: snippet.categoryId,\n        liveBroadcastContent: snippet.liveBroadcastContent,\n        defaultLanguage: snippet.defaultLanguage,\n        defaultAudioLanguage: snippet.defaultAudioLanguage,\n        duration: calculateDuration(content.duration),\n        dimension: content.dimension,\n        definition: content.definition === 'hd' ? 5 : 4,\n        caption: content.caption === 'true' ? true : undefined,\n        licensedContent: content.licensedContent,\n        projection: content.projection === 'rectangular' ? undefined : '3'\n      };\n      if (thumbnail) {\n        i.thumbnail = thumbnail.default ? thumbnail.default.url : undefined;\n        i.mediumThumbnail = thumbnail.medium ? thumbnail.medium.url : undefined;\n        i.highThumbnail = thumbnail.high ? thumbnail.high.url : undefined;\n        i.standardThumbnail = thumbnail.standard ? thumbnail.standard.url : undefined;\n        i.maxresThumbnail = thumbnail.maxres ? thumbnail.maxres.url : undefined;\n      }\n      if (content.regionRestriction) {\n        i.allowedRegions = content.regionRestriction.allow;\n        i.blockedRegions = content.regionRestriction.blocked;\n      }\n      return i;\n    } else {\n      const i: Video = {\n        id: item.id,\n        duration: calculateDuration(content.duration),\n        dimension: content.dimension,\n        definition: content.definition === 'hd' ? 5 : undefined,\n        caption: content.caption === 'true' ? true : undefined,\n        licensedContent: content.licensedContent,\n        projection: content.projection === 'rectangular' ? undefined : '3'\n      };\n      if (content.regionRestriction) {\n        i.allowedRegions = content.regionRestriction.allow;\n        i.blockedRegions = content.regionRestriction.blocked;\n      }\n      return i;\n    }\n  });\n  return { list, total: res.pageInfo.totalResults, limit: res.pageInfo.resultsPerPage, nextPageToken: res.nextPageToken };\n}\n","import {Comment, CommentSnippet, CommentThead, TopLevelCommentSnippet} from './comment';\nimport {BigThumbnail, CategorySnippet, Channel, ChannelDetail, ChannelSM, ChannelSnippet, Item, ItemSM, ListDetail, ListItem, ListResult, Playlist, PlaylistSM, PlaylistSnippet, PlaylistVideo, PlaylistVideoSnippet, SearchId, SearchSnippet, StringMap, Thumbnail, Title, Video, VideoCategory, VideoItemDetail, VideoSnippet, YoutubeListResult, YoutubeVideoDetail} from './models';\nimport {CommentOrder, HttpRequest, VideoService} from './service';\nimport {ChannelSync, getNewVideos, notIn, SyncClient, SyncRepository, SyncService} from './sync';\nimport {fromYoutubeCategories, fromYoutubeChannels, fromYoutubePlaylist, fromYoutubePlaylists, fromYoutubeSearch, fromYoutubeVideos, getYoutubeSort} from './youtube';\nexport * from './models';\nexport * from './comment';\nexport * from './service';\nexport * from './youtube';\nexport * from './sync';\n\nexport const channelMap: StringMap = {\n  publishedat: 'publishedAt',\n  customurl: 'customUrl',\n  localizedtitle: 'localizedTitle',\n  localizeddescription: 'localizedDescription',\n  mediumthumbnail: 'mediumThumbnail',\n  highthumbnail: 'highThumbnail',\n  lastupload: 'lastUpload',\n  itemcount: 'itemCount',\n  playlistcount: 'playlistCount',\n  playlistitemcount: 'playlistItemCount',\n  playlistvideocount: 'playlistVideoCount',\n  playlistvideoitemcount: 'playlistVideoItemCount',\n};\nexport const playlistMap: StringMap = {\n  publishedat: 'publishedAt',\n  channelid: 'channelId',\n  channeltitle: 'channelTitle',\n  localizedtitle: 'localizedTitle',\n  localizeddescription: 'localizedDescription',\n  mediumthumbnail: 'mediumThumbnail',\n  highthumbnail: 'highThumbnail',\n  standardthumbnail: 'standardThumbnail',\n  maxresthumbnail: 'maxresThumbnail',\n};\nexport const videoMap: StringMap = {\n  publishedat: 'publishedAt',\n  categoryid: 'categoryId',\n  channelid: 'channelId',\n  channeltitle: 'channelTitle',\n  localizedtitle: 'localizedTitle',\n  localizeddescription: 'localizedDescription',\n  mediumthumbnail: 'mediumThumbnail',\n  highthumbnail: 'highThumbnail',\n  standardthumbnail: 'standardThumbnail',\n  maxresthumbnail: 'maxresThumbnail',\n  defaultaudiolanguage: 'defaultAudioLanguage',\n  defaultlanguage: 'defaultLanguage',\n  licensedcontent: 'licensedContent',\n  livebroadcastcontent: 'liveBroadcastContent',\n  blockedregions: 'blockedRegions',\n  allowedregions: 'allowedRegions'\n};\nexport const playlistFields = ['id', 'channelId', 'channelTitle', 'description',\n  'highThumbnail', 'localizedDescription', 'localizedTitle',\n  'maxresThumbnail', 'mediumThumbnail', 'publishedAt', 'standardThumbnail',\n  'thumbnail', 'title', 'count', 'itemCount'];\nexport const channelFields = ['id', 'count', 'country', 'lastUpload', 'customUrl', 'description',\n  'favorites', 'highThumbnail', 'itemCount', 'likes', 'localizedDescription', 'localizedTitle',\n  'mediumThumbnail', 'publishedat', 'thumbnail', 'title', 'uploads',\n  'count', 'itemCount', 'playlistCount', 'playlistItemCount', 'playlistVideoCount', 'playlistVideoItemCount'\n];\nexport const videoFields = [\n  'id', 'caption', 'categoryId', 'channelId', 'channelTitle', 'defaultAudioLanguage',\n  'defaultLanguage', 'definition', 'description', 'dimension', 'duration', 'highThumbnail',\n  'licensedContent', 'liveBroadcastContent', 'localizedDescription', 'localizedTitle', 'maxresThumbnail',\n  'mediumThumbnail', 'projection', 'publishedAt', 'standardThumbnail', 'tags', 'thumbnail', 'title', 'blockedRegions', 'allowedRegions'\n];\nexport function isEmpty(s: string): boolean {\n  return !(s && s.length > 0);\n}\nexport function getFields(fields: string[], all?: string[]): string[] {\n  if (!fields || fields.length === 0) {\n    return undefined;\n  }\n  const existFields: string[] = [];\n  if (all) {\n    for (const s of fields) {\n      if (all.includes(s)) {\n        existFields.push(s);\n      }\n    }\n    if (existFields.length === 0) {\n      return undefined;\n    } else {\n      return existFields;\n    }\n  } else {\n    return fields;\n  }\n}\nexport function getLimit(limit?: number, d?: number): number {\n  if (limit) {\n    return limit;\n  }\n  if (d && d > 0) {\n    return d;\n  }\n  return 48;\n}\nexport function map<T>(obj: T, m?: StringMap): any {\n  if (!m) {\n    return obj;\n  }\n  const mkeys = Object.keys(m);\n  if (mkeys.length === 0) {\n    return obj;\n  }\n  const obj2: any = {};\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    let k0 = m[key];\n    if (!k0) {\n      k0 = key;\n    }\n    obj2[k0] = obj[key];\n  }\n  return obj2;\n}\nexport function mapArray<T>(results: T[], m?: StringMap): T[] {\n  if (!m) {\n    return results;\n  }\n  const mkeys = Object.keys(m);\n  if (mkeys.length === 0) {\n    return results;\n  }\n  const objs = [];\n  const length = results.length;\n  for (let i = 0; i < length; i++) {\n    const obj = results[i];\n    const obj2: any = {};\n    const keys = Object.keys(obj);\n    for (const key of keys) {\n      let k0 = m[key];\n      if (!k0) {\n        k0 = key;\n      }\n      obj2[k0] = (obj as any)[key];\n    }\n    objs.push(obj2);\n  }\n  return objs;\n}\n\nexport function buildShownItems<T extends Title>(keyword: string, all: T[], includeDescription?: boolean): T[] {\n  if (!all) {\n    return [];\n  }\n  if (!keyword || keyword === '') {\n    return all;\n  }\n  const w = keyword.toLowerCase();\n  if (includeDescription) {\n    return all.filter(i => i.title && i.title.toLowerCase().includes(w) || i.description && i.description.toLocaleLowerCase().includes(w));\n  } else {\n    return all.filter(i => i.title && i.title.toLowerCase().includes(w));\n  }\n}\n\nexport class VideoClient implements VideoService {\n  private channelCache: Cache<Channel>;\n  private playlistCache: Cache<Playlist>;\n  getCommentThreads?: (videoId: string, sort?: CommentOrder, max?: number, nextPageToken?: string) => Promise<ListResult<CommentThead>>;\n  getComments?: (id: string, max?: number, nextPageToken?: string) => Promise<ListResult<Comment>>;\n  getSubcriptions?: (channelId?: string, mine?: boolean, max?: number, nextPageToken?: string | number) => Promise<ListResult<Channel>>;\n  constructor(private url: string, private httpRequest: HttpRequest, private maxChannel: number = 40, private maxPlaylist: number = 200, private key?: string) {\n    this.channelCache = {};\n    this.playlistCache = {};\n    this.getCagetories = this.getCagetories.bind(this);\n    this.getChannels = this.getChannels.bind(this);\n    this.getChannel = this.getChannel.bind(this);\n    this.getChannelPlaylists = this.getChannelPlaylists.bind(this);\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.getPlaylist = this.getPlaylist.bind(this);\n    this.getPlaylistVideos = this.getPlaylistVideos.bind(this);\n    this.getChannelVideos = this.getChannelVideos.bind(this);\n    this.getPopularVideos = this.getPopularVideos.bind(this);\n    this.getPopularVideosByRegion = this.getPopularVideosByRegion.bind(this);\n    this.getPopularVideosByCategory = this.getPopularVideosByCategory.bind(this);\n    this.getVideos = this.getVideos.bind(this);\n    this.getVideo = this.getVideo.bind(this);\n    this.search = this.search.bind(this);\n    this.getRelatedVideos = this.getRelatedVideos.bind(this);\n    this.searchVideos = this.searchVideos.bind(this);\n    this.searchPlaylists = this.searchPlaylists.bind(this);\n    this.searchChannels = this.searchChannels.bind(this);\n    if (key && key.length > 0) {\n      this.getCommentThreads = (videoId: string, sort?: CommentOrder, max?: number, nextPageToken?: string): Promise<ListResult<CommentThead>> => {\n        return getCommentThreads(httpRequest, key, videoId, sort, max, nextPageToken);\n      };\n      this.getComments = (id: string, max?: number, nextPageToken?: string): Promise<ListResult<Comment>> => {\n        return getComments(httpRequest, key, id, max, nextPageToken);\n      };\n      this.getSubcriptions = (channelId?: string, mine?: boolean, max?: number, nextPageToken?: string | number): Promise<ListResult<Channel>> => {\n        return getSubcriptions(httpRequest, key, channelId, mine, max, nextPageToken);\n      };\n    }\n  }\n  getCagetories(regionCode?: string): Promise<VideoCategory[]> {\n    if (!regionCode) {\n      regionCode = 'US';\n    }\n    const url = `${this.url}/category?regionCode=${regionCode}`;\n    return this.httpRequest.get<VideoCategory[]>(url);\n  }\n  getChannels(ids: string[], fields?: string[]): Promise<Channel[]> {\n    const url = `${this.url}/channels/list?id=${ids.join(',')}&fields=${fields}`;\n    return this.httpRequest.get<Channel[]>(url).then(res => formatPublishedAt(res));\n  }\n  getChannel(id: string, fields?: string[]): Promise<Channel> {\n    const c = this.channelCache[id];\n    if (c) {\n      return Promise.resolve(c.item);\n    } else {\n      const field = fields ? `?fields=${fields}` : '';\n      const url = `${this.url}/channels/${id}${field}`;\n      return this.httpRequest.get<Channel>(url).then(channel => {\n        if (channel) {\n          if (channel.publishedAt) {\n            channel.publishedAt = new Date(channel.publishedAt);\n          }\n          this.channelCache[id] = {item: channel, timestamp: new Date()};\n          removeCache(this.channelCache, this.maxChannel);\n        }\n        return channel;\n      }).catch(err => {\n        const data = (err &&  err.response) ? err.response : err;\n        if (data && (data.status === 404 || data.status === 410)) {\n          return null;\n        }\n        throw err;\n      });\n    }\n  }\n  getChannelPlaylists(channelId: string, max?: number, nextPageToken?: string, fields?: string[]): Promise<ListResult<Playlist>> {\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/playlists?channelId=${channelId}&limit=${maxResults}${pageToken}${field}`;\n    return this.httpRequest.get<ListResult<Playlist>>(url).then(res => {\n      formatPublishedAt<Playlist>(res.list);\n      const r: ListResult<Playlist> = {\n        list: decompressItems(res.list),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n  getPlaylists(ids: string[], fields?: string[]): Promise<Playlist[]> {\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/playlists/list?id=${ids.join(',')}${field}`;\n    return this.httpRequest.get<Playlist[]>(url).then(res => formatPublishedAt(res));\n  }\n  getPlaylist(id: string, fields?: string[]): Promise<Playlist> {\n    const c = this.playlistCache[id];\n    if (c) {\n      return Promise.resolve(c.item);\n    } else {\n      const field = fields ? `?fields=${fields}` : '';\n      const url = `${this.url}/playlists/${id}${field}`;\n      return this.httpRequest.get<Playlist>(url).then(playlist => {\n        if (playlist) {\n          if (playlist.publishedAt) {\n            playlist.publishedAt = new Date(playlist.publishedAt);\n          }\n          this.playlistCache[id] = {item: playlist, timestamp: new Date()};\n          removeCache(this.playlistCache, this.maxPlaylist);\n        }\n        return playlist;\n      }).catch(err => {\n        const data = (err &&  err.response) ? err.response : err;\n        if (data && (data.status === 404 || data.status === 410)) {\n          return null;\n        }\n        throw err;\n      });\n    }\n  }\n  getPlaylistVideos(playlistId: string, max?: number, nextPageToken?: string, fields?: string[]): Promise<ListResult<PlaylistVideo>> {\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/videos?playlistId=${playlistId}&limit=${maxResults}${pageToken}${field}`;\n    return this.httpRequest.get<ListResult<PlaylistVideo>>(url).then(res => {\n      formatPublishedAt<PlaylistVideo>(res.list);\n      const r: ListResult<PlaylistVideo> = {\n        list: decompress(res.list),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n  getChannelVideos(channelId: string, max?: number, nextPageToken?: string, fields?: string[]): Promise<ListResult<PlaylistVideo>> {\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/videos?channelId=${channelId}&limit=${maxResults}${pageToken}${field}`;\n    return this.httpRequest.get<ListResult<PlaylistVideo>>(url).then(res => {\n      formatPublishedAt<PlaylistVideo>(res.list);\n      const r: ListResult<PlaylistVideo> = {\n        list: decompress(res.list),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n  getPopularVideos(regionCode?: string, videoCategoryId?: string, max?: number, nextPageToken?: string, fields?: string[]): Promise<ListResult<Video>> {\n    if ((!regionCode || regionCode.length === 0) && (!videoCategoryId || videoCategoryId.length === 0)) {\n      regionCode = 'US';\n    }\n    const regionParam = regionCode && regionCode.length > 0 ? `&regionCode=${regionCode}` : '';\n    const categoryParam = videoCategoryId && videoCategoryId.length > 0 ? `&categoryId=${videoCategoryId}` : '';\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/videos/popular?limit=${maxResults}${pageToken}${regionParam}${categoryParam}${field}`;\n    return this.httpRequest.get<ListResult<Video>>(url).then(res => {\n      formatPublishedAt<Video>(res.list);\n      const r: ListResult<Video> = {\n        list: decompress(res.list),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n  getPopularVideosByRegion(regionCode?: string, max?: number, nextPageToken?: string, fields?: string[]): Promise<ListResult<Video>> {\n    return this.getPopularVideos(regionCode, undefined, max, nextPageToken, fields);\n  }\n  getPopularVideosByCategory(videoCategoryId?: string, max?: number, nextPageToken?: string, fields?: string[]): Promise<ListResult<Video>> {\n    return this.getPopularVideos(undefined, videoCategoryId, max, nextPageToken, fields);\n  }\n  getVideos(ids: string[], fields?: string[], noSnippet?: boolean): Promise<Video[]> {\n    if (!ids || ids.length === 0) {\n      return Promise.resolve([]);\n    }\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/videos/list?id=${ids.join(',')}${field}`;\n    return this.httpRequest.get<Video[]>(url).then(res => formatPublishedAt(res));\n  }\n  getRelatedVideos(videoId: string, max?: number, nextPageToken?: string, fields?: string[]): Promise<ListResult<Item>> {\n    if (!videoId || videoId.length === 0) {\n      const r: ListResult<Item> = {list: []};\n      return Promise.resolve(r);\n    }\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/videos/${videoId}/related?limit=${maxResults}${pageToken}${field}`;\n    return this.httpRequest.get<ListResult<Item>>(url).then(res => {\n      formatPublishedAt<Item>(res.list);\n      const r: ListResult<Item> = {\n        list: decompress(res.list),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n  getVideo(id: string, fields?: string[], noSnippet?: boolean): Promise<Video> {\n    const field = fields ? `?fields=${fields}` : '';\n    const url = `${this.url}/videos/${id}${field}`;\n    return this.httpRequest.get<Video>(url).then(video => {\n      if (video && video.publishedAt) {\n        video.publishedAt = new Date(video.publishedAt);\n      }\n      return video;\n    }).catch(err => {\n      const data = (err &&  err.response) ? err.response : err;\n      if (data && (data.status === 404 || data.status === 410)) {\n        return null;\n      }\n      throw err;\n    });\n  }\n  search(sm: ItemSM, max?: number, nextPageToken?: string|number): Promise<ListResult<Item>> {\n    const searchType = sm.type ? `&type=${sm.type}` : '';\n    const searchDuration = sm.type === 'video' && (sm.duration === 'long' || sm.duration === 'medium' || sm.duration === 'short') ? `&videoDuration=${sm.duration}` : '';\n    const searchOrder = (sm.sort === 'date' || sm.sort === 'rating' || sm.sort === 'title' || sm.sort === 'count' || sm.sort === 'viewCount' ) ? `&sort=${sm.sort}` : '';\n    const regionParam = (sm.regionCode && sm.regionCode.length > 0 ? `&regionCode=${sm.regionCode}` : '');\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const maxResults = (max && max > 0 ? max : 50); // maximum is 50\n    const url = `https://www.googleapis.com/youtube/v3/search?key=${this.key}&part=snippet${regionParam}&q=${sm.q}&maxResults=${maxResults}${searchType}${searchDuration}${searchOrder}${pageToken}`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<SearchId, SearchSnippet, any>>>(url).then(res => {\n      const r = fromYoutubeSearch(res);\n      r.list = formatThumbnail(r.list);\n      return r;\n    });\n  }\n  searchVideos(sm: ItemSM, max?: number, nextPageToken?: string|number, fields?: string[]): Promise<ListResult<Item>> {\n    const searchDuration = sm.type === 'video' && (sm.duration === 'long' || sm.duration === 'medium' || sm.duration === 'short') ? `&videoDuration=${sm.duration}` : '';\n    const searchOrder = (sm.sort === 'date' || sm.sort === 'rating' || sm.sort === 'title' || sm.sort === 'count' || sm.sort === 'viewCount' ) ? `&sort=${sm.sort}` : '';\n    const regionParam = (sm.regionCode && sm.regionCode.length > 0 ? `&regionCode=${sm.regionCode}` : '');\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const maxResults = (max && max > 0 ? max : 50); // maximum is 50\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/videos/search?q=${sm.q}${searchDuration}${regionParam}${searchOrder}${pageToken}${field}&limit=${maxResults}`;\n    return this.httpRequest.get<ListResult<Item>>(url).then(res => {\n      formatPublishedAt<Item>(res.list);\n      const r: ListResult<Item> = {\n        list: decompress(res.list),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n  searchPlaylists?(sm: PlaylistSM, max?: number, nextPageToken?: string|number, fields?: string[]): Promise<ListResult<Playlist>> {\n    const searchOrder = (sm.sort === 'date' || sm.sort === 'rating' || sm.sort === 'title' || sm.sort === 'count' || sm.sort === 'viewCount' ) ? `&sort=${sm.sort}` : '';\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const maxResults = (max && max > 0 ? max : 50); // maximum is 50\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/playlists/search?q=${sm.q}${searchOrder}${pageToken}${field}&limit=${maxResults}`;\n    return this.httpRequest.get<ListResult<Playlist>>(url).then(res => {\n      formatPublishedAt<Playlist>(res.list);\n      const r: ListResult<Playlist> = {\n        list: decompressItems(res.list),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n  searchChannels?(sm: ChannelSM, max?: number, nextPageToken?: string|number, fields?: string[]): Promise<ListResult<Channel>> {\n    const searchOrder = (sm.sort === 'date' || sm.sort === 'rating' || sm.sort === 'title' || sm.sort === 'count' || sm.sort === 'viewCount' ) ? `&sort=${sm.sort}` : '';\n    const pageToken = (nextPageToken ? `&nextPageToken=${nextPageToken}` : '');\n    const maxResults = (max && max > 0 ? max : 50); // maximum is 50\n    const field = fields ? `&fields=${fields}` : '';\n    const url = `${this.url}/channels/search?q=${sm.q}${searchOrder}${pageToken}${field}&limit=${maxResults}`;\n    return this.httpRequest.get<ListResult<Channel>>(url).then(res => {\n      formatPublishedAt<Channel>(res.list);\n      const r: ListResult<Channel> = {\n        list: res.list,\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n  }\n}\n\nexport class YoutubeSyncClient implements SyncClient {\n  constructor(private key: string, private httpRequest: HttpRequest) {\n    this.getChannels = this.getChannels.bind(this);\n    this.getChannel = this.getChannel.bind(this);\n    this.getChannelPlaylists = this.getChannelPlaylists.bind(this);\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.getPlaylist = this.getPlaylist.bind(this);\n    this.getPlaylistVideos = this.getPlaylistVideos.bind(this);\n    this.getVideos = this.getVideos.bind(this);\n  }\n  private getChannels(ids: string[]): Promise<Channel[]> {\n    const url = `https://www.googleapis.com/youtube/v3/channels?key=${this.key}&id=${ids.join(',')}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, ChannelSnippet, ChannelDetail>>>(url).then(res => formatThumbnail(fromYoutubeChannels(res)));\n  }\n  getChannel(id: string): Promise<Channel> {\n    return this.getChannels([id]).then(res => {\n      const channel = res && res.length > 0 ? res[0] : null;\n      return channel;\n    });\n  }\n  private getPlaylists(ids: string[]): Promise<Playlist[]> {\n    const url = `https://youtube.googleapis.com/youtube/v3/playlists?key=${this.key}&id=${ids.join(',')}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, PlaylistSnippet, ListDetail>>>(url).then(res => {\n      const r = fromYoutubePlaylists(res);\n      return r.list;\n    });\n  }\n  getPlaylist(id: string): Promise<Playlist> {\n    return this.getPlaylists([id]).then(res => {\n      const playlist = res && res.length > 0 ? res[0] : null;\n      return playlist;\n    });\n  }\n  getChannelPlaylists(channelId: string, max?: number, nextPageToken?: string): Promise<ListResult<Playlist>> {\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const url = `https://youtube.googleapis.com/youtube/v3/playlists?key=${this.key}&channelId=${channelId}&maxResults=${maxResults}${pageToken}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, PlaylistSnippet, ListDetail>>>(url).then(res => fromYoutubePlaylists(res));\n  }\n  getPlaylistVideos(playlistId: string, max?: number, nextPageToken?: string): Promise<ListResult<PlaylistVideo>> {\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const url = `https://youtube.googleapis.com/youtube/v3/playlistItems?key=${this.key}&playlistId=${playlistId}&maxResults=${maxResults}${pageToken}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, PlaylistVideoSnippet, VideoItemDetail>>>(url).then(res => {\n      const r = fromYoutubePlaylist(res);\n      if (r.list) {\n        r.list = r.list.filter(i => i.thumbnail);\n      }\n      return r;\n    });\n  }\n  getVideos(ids: string[]): Promise<Video[]> {\n    if (!ids || ids.length === 0) {\n      return Promise.resolve([]);\n    }\n    const strSnippet = 'snippet,';\n    const url = `https://www.googleapis.com/youtube/v3/videos?key=${this.key}&part=${strSnippet}contentDetails&id=${ids.join(',')}`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, VideoSnippet, YoutubeVideoDetail>>>(url).then(res => {\n      const r = fromYoutubeVideos(res);\n      if (!r || !r.list) {\n        return [];\n      }\n      return r.list;\n    });\n  }\n}\nexport class YoutubeClient implements VideoService {\n  private channelCache: Cache<Channel>;\n  private playlistCache: Cache<Playlist>;\n  constructor(private key: string, private httpRequest: HttpRequest, private maxChannel: number = 40, private maxPlaylist: number = 200) {\n    this.channelCache = {};\n    this.playlistCache = {};\n    this.getCagetories = this.getCagetories.bind(this);\n    this.getChannels = this.getChannels.bind(this);\n    this.getChannel = this.getChannel.bind(this);\n    this.getChannelPlaylists = this.getChannelPlaylists.bind(this);\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.getPlaylist = this.getPlaylist.bind(this);\n    this.getPlaylistVideos = this.getPlaylistVideos.bind(this);\n    this.getChannelVideos = this.getChannelVideos.bind(this);\n    this.getPopularVideos = this.getPopularVideos.bind(this);\n    this.getPopularVideosByRegion = this.getPopularVideosByRegion.bind(this);\n    this.getPopularVideosByCategory = this.getPopularVideosByCategory.bind(this);\n    this.getVideos = this.getVideos.bind(this);\n    this.getVideo = this.getVideo.bind(this);\n    this.search = this.search.bind(this);\n    this.getRelatedVideos = this.getRelatedVideos.bind(this);\n    this.searchVideos = this.searchVideos.bind(this);\n    this.searchPlaylists = this.searchPlaylists.bind(this);\n    this.searchChannels = this.searchChannels.bind(this);\n    this.getCommentThreads = this.getCommentThreads.bind(this);\n    this.getComments = this.getComments.bind(this);\n    this.getSubcription = this.getSubcription.bind(this);\n  }\n  getCagetories(regionCode?: string): Promise<VideoCategory[]> {\n    if (!regionCode) {\n      regionCode = 'US';\n    }\n    const url = `https://www.googleapis.com/youtube/v3/videoCategories?key=AIzaSyDVRw8jjqyJWijg57zXSOMpUArlZGpC7bE&regionCode=${regionCode}`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, CategorySnippet, any>>>(url).then(res => fromYoutubeCategories(res));\n  }\n  getChannels(ids: string[]): Promise<Channel[]> {\n    const url = `https://www.googleapis.com/youtube/v3/channels?key=${this.key}&id=${ids.join(',')}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, ChannelSnippet, ChannelDetail>>>(url).then(res => formatThumbnail(fromYoutubeChannels(res)));\n  }\n  getChannel(id: string): Promise<Channel> {\n    const c = this.channelCache[id];\n    if (c) {\n      return Promise.resolve(c.item);\n    } else {\n      return this.getChannels([id]).then(res => {\n        const channel = res && res.length > 0 ? res[0] : null;\n        if (channel) {\n          const d = new Date();\n          this.channelCache[id] = { item: channel, timestamp: d};\n          if (channel.customUrl && channel.customUrl.length > 0) {\n            this.channelCache[channel.customUrl] = { item: channel, timestamp: d};\n          }\n          removeCache(this.channelCache, this.maxChannel);\n        }\n        return channel;\n      });\n    }\n  }\n  getChannelPlaylists(channelId: string, max?: number, nextPageToken?: string): Promise<ListResult<Playlist>> {\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const url = `https://youtube.googleapis.com/youtube/v3/playlists?key=${this.key}&channelId=${channelId}&maxResults=${maxResults}${pageToken}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, PlaylistSnippet, ListDetail>>>(url).then(res => fromYoutubePlaylists(res));\n  }\n  getPlaylists(ids: string[]): Promise<Playlist[]> {\n    const url = `https://youtube.googleapis.com/youtube/v3/playlists?key=${this.key}&id=${ids.join(',')}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, PlaylistSnippet, ListDetail>>>(url).then(res => {\n      const r = fromYoutubePlaylists(res);\n      r.list = formatBigThumbnail(r.list);\n      return r.list;\n    });\n  }\n  getPlaylist(id: string): Promise<Playlist> {\n    const c = this.playlistCache[id];\n    if (c) {\n      return Promise.resolve(c.item);\n    } else {\n      return this.getPlaylists([id]).then(res => {\n        const playlist = res && res.length > 0 ? res[0] : null;\n        if (playlist) {\n          this.playlistCache[id] = { item: playlist, timestamp: new Date() };\n          removeCache(this.playlistCache, this.maxPlaylist);\n        }\n        return playlist;\n      });\n    }\n  }\n  getPlaylistVideos(playlistId: string, max?: number, nextPageToken?: string): Promise<ListResult<PlaylistVideo>> {\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const url = `https://youtube.googleapis.com/youtube/v3/playlistItems?key=${this.key}&playlistId=${playlistId}&maxResults=${maxResults}${pageToken}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, PlaylistVideoSnippet, VideoItemDetail>>>(url).then(res => {\n      const r = fromYoutubePlaylist(res);\n      r.list = formatThumbnail(r.list);\n      return r;\n    });\n  }\n  getChannelVideos(channelId: string, max?: number, nextPageToken?: string): Promise<ListResult<PlaylistVideo>> {\n    return this.getChannel(channelId).then(channel => {\n      if (!channel) {\n        const result: ListResult<PlaylistVideo> = {\n          list: []\n        };\n        return result;\n      }\n      return this.getPlaylistVideos(channel.uploads, max, nextPageToken);\n    });\n  }\n  getPopularVideos(regionCode?: string, videoCategoryId?: string, max?: number, nextPageToken?: string): Promise<ListResult<Video>> {\n    if ((!regionCode || regionCode.length === 0) && (!videoCategoryId || videoCategoryId.length === 0)) {\n      regionCode = 'US';\n    }\n    const regionParam = regionCode && regionCode.length > 0 ? `&regionCode=${regionCode}` : '';\n    const categoryParam = videoCategoryId && videoCategoryId.length > 0 ? `&videoCategoryId=${videoCategoryId}` : '';\n    const maxResults = (max && max > 0 ? max : 50);\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const url = `https://youtube.googleapis.com/youtube/v3/videos?key=${this.key}&chart=mostPopular${regionParam}${categoryParam}&maxResults=${maxResults}${pageToken}&part=snippet,contentDetails`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, VideoSnippet, YoutubeVideoDetail>>>(url).then(res => {\n      const r = fromYoutubeVideos(res);\n      r.list = formatBigThumbnail(r.list);\n      return r;\n    });\n  }\n  getPopularVideosByRegion(regionCode?: string, max?: number, nextPageToken?: string): Promise<ListResult<Video>> {\n    return this.getPopularVideos(regionCode, undefined, max, nextPageToken);\n  }\n  getPopularVideosByCategory(videoCategoryId?: string, max?: number, nextPageToken?: string): Promise<ListResult<Video>> {\n    return this.getPopularVideos(undefined, videoCategoryId, max, nextPageToken);\n  }\n  getVideos(ids: string[], fields?: string[], noSnippet?: boolean): Promise<Video[]> {\n    if (!ids || ids.length === 0) {\n      return Promise.resolve([]);\n    }\n    const strSnippet = (noSnippet ? '' : 'snippet,');\n    const url = `https://www.googleapis.com/youtube/v3/videos?key=${this.key}&part=${strSnippet}contentDetails&id=${ids.join(',')}`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<string, VideoSnippet, YoutubeVideoDetail>>>(url).then(res => {\n      const r = fromYoutubeVideos(res);\n      if (!r || !r.list) {\n        return [];\n      }\n      return formatBigThumbnail(r.list);\n    });\n  }\n  getVideo(id: string, fields?: string[], noSnippet?: boolean): Promise<Video> {\n    return this.getVideos([id], fields, noSnippet).then(res => res && res.length > 0 ? res[0] : null);\n  }\n  getCommentThreads(videoId: string, sort?: CommentOrder, max?: number, nextPageToken?: string): Promise<ListResult<CommentThead>> {\n    return getCommentThreads(this.httpRequest, this.key, videoId, sort, max, nextPageToken);\n  }\n  getComments(id: string, max?: number, nextPageToken?: string): Promise<ListResult<Comment>> {\n    return getComments(this.httpRequest, this.key, id, max, nextPageToken);\n  }\n  search(sm: ItemSM, max?: number, nextPageToken?: string | number): Promise<ListResult<Item>> {\n    const searchType = sm.type ? `&type=${sm.type}` : '';\n    const searchDuration = (sm.duration === 'long' || sm.duration === 'medium' || sm.duration === 'short') ? `&videoDuration=${sm.duration}` : '';\n    const s = getYoutubeSort(sm.sort);\n    const searchOrder = (s ? `&order=${s}` : '');\n    const regionParam = (sm.regionCode && sm.regionCode.length > 0 ? `&regionCode=${sm.regionCode}` : '');\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const maxResults = (max && max > 0 ? max : 50); // maximum is 50\n    const url = `https://www.googleapis.com/youtube/v3/search?key=${this.key}&part=snippet${regionParam}&q=${sm.q}&maxResults=${maxResults}${searchType}${searchDuration}${searchOrder}${pageToken}`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<SearchId, SearchSnippet, any>>>(url).then(res => fromYoutubeSearch(res));\n  }\n  searchVideos(sm: ItemSM, max?: number, nextPageToken?: string | number): Promise<ListResult<Item>> {\n    sm.type = 'video';\n    return this.search(sm, max, nextPageToken);\n  }\n  searchPlaylists?(sm: PlaylistSM, max?: number, nextPageToken?: string | number): Promise<ListResult<Playlist>> {\n    const s: any = sm;\n    s.type = 'playlist';\n    return this.search(s, max, nextPageToken).then(res => {\n      const list = res.list.map(i => {\n        const p: Playlist = {\n          id: i.id,\n          title: i.title,\n          description: i.description,\n          publishedAt: i.publishedAt,\n          thumbnail: i.thumbnail,\n          mediumThumbnail: i.mediumThumbnail,\n          highThumbnail: i.highThumbnail,\n          channelId: i.channelId,\n          channelTitle: i.channelTitle\n        };\n        return p;\n      });\n      return { list, total: res.total, limit: res.limit, nextPageToken: res.nextPageToken };\n    });\n  }\n  searchChannels?(sm: ChannelSM, max?: number, nextPageToken?: string | number): Promise<ListResult<Channel>> {\n    const s: any = sm;\n    s.type = 'channel';\n    return this.search(s, max, nextPageToken).then(res => {\n      const list = res.list.map(i => {\n        const p: Channel = {\n          id: i.id,\n          title: i.title,\n          description: i.description,\n          publishedAt: i.publishedAt,\n          thumbnail: i.thumbnail,\n          mediumThumbnail: i.mediumThumbnail,\n          highThumbnail: i.highThumbnail,\n          channelId: i.channelId,\n          channelTitle: i.channelTitle\n        };\n        return p;\n      });\n      return { list, total: res.total, limit: res.limit, nextPageToken: res.nextPageToken };\n    });\n  }\n  getRelatedVideos(videoId: string, max?: number, nextPageToken?: string): Promise<ListResult<Item>> {\n    return this.getPopularVideos('US').then(list => list as any);\n    /*\n    const maxResults = (max && max > 0 ? max : 24);\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const url = `https://youtube.googleapis.com/youtube/v3/search?key=${this.key}&relatedToVideoId=${videoId}&type=video&regionCode=VN&maxResults=${maxResults}${pageToken}&part=snippet`;\n    return this.httpRequest.get<YoutubeListResult<ListItem<SearchId, SearchSnippet, any>>>(url).then(res => fromYoutubeSearch(res));\n    */\n  }\n  getSubcription?(channelId?: string, mine?: boolean, max?: number, nextPageToken?: string | number): Promise<ListResult<Channel>> {\n    return getSubcriptions(this.httpRequest, this.key, channelId, mine, max, nextPageToken);\n  }\n}\n\n// export class DefaultSyncService implements SyncService {\n//   constructor(private client: SyncClient, private repo: SyncRepository, private log?: (msg: any, ctx?: any) => void) {\n//     this.syncChannel = this.syncChannel.bind(this);\n//     this.syncChannels = this.syncChannel.bind(this);\n//     this.syncPlaylist = this.syncPlaylist.bind(this);\n//     this.syncPlaylists = this.syncPlaylists.bind(this);\n//   }\n//   syncChannel(channelId: string): Promise<number> {\n//     return syncChannel(channelId, this.client, this.repo, this.log);\n//   }\n//   syncChannels(channelIds: string[]): Promise<number> {\n//     return syncChannels(channelIds, this.client, this.repo);\n//   }\n//   syncPlaylist(playlistId: string, level?: number): Promise<number> {\n//     const syncVideos = level && level < 2 ? false : true;\n//     return syncPlaylist(playlistId, syncVideos, this.client, this.repo, this.log);\n//   }\n//   syncPlaylists(playlistIds: string[], level?: number): Promise<number> {\n//     const syncVideos = level && level < 2 ? false : true;\n//     return syncPlaylists(playlistIds, syncVideos, this.client, this.repo);\n//   }\n// }\n\nexport function syncChannels(channelIds: string[], client: SyncClient, repo: SyncRepository): Promise<number> {\n  const promises = channelIds.map(channelId => syncChannel(channelId, client, repo));\n  let sum = 0;\n  return Promise.all(promises).then(res => {\n    for (const num of res) {\n      sum = sum + num;\n    }\n    return sum;\n  });\n}\nexport async function syncChannel(channelId: string, client: SyncClient, repo: SyncRepository, log?: (msg: any, ctx?: any) => void): Promise<number> {\n  return repo.getChannelSync(channelId).then(channelSync => {\n    const res = client.getChannel(channelId).then(channel => {\n      if (!channel) {\n        return Promise.resolve(0);\n      } else {\n        return checkAndSyncUploads(channel, channelSync, client, repo);\n      }\n    });\n    return res;\n  }).catch(err => {\n    if (log) {\n      log(err);\n    }\n    throw err;\n  });\n}\nexport function checkAndSyncUploads(channel: Channel, channelSync: ChannelSync, client: SyncClient, repo: SyncRepository): Promise<number> {\n  if (!channel.uploads || channel.uploads.length === 0) {\n    return Promise.resolve(0);\n  } else {\n    const date = new Date();\n    const timestamp = channelSync ? channelSync.syncTime : undefined;\n    const syncVideos = (!channelSync || (channelSync && channelSync.level && channelSync.level >= 2)) ? true : false;\n    const syncCollection = (!channelSync || (channelSync && channelSync.level && channelSync.level >= 1)) ? true : false;\n    syncUploads(channel.uploads, client, repo, timestamp).then(r => {\n      channel.lastUpload = r.timestamp;\n      channel.count = r.count;\n      channel.itemCount = r.all;\n      syncChannelPlaylists(channel.id, syncVideos, syncCollection, client, repo).then(res => {\n        if (syncCollection) {\n          channel.playlistCount = res.count;\n          channel.playlistItemCount = res.all;\n          channel.playlistVideoCount = res.videoCount;\n          channel.playlistVideoItemCount = res.allVideoCount;\n        }\n        return repo.saveChannel(channel).then(c => {\n          return repo.saveChannelSync({ id: channel.id, syncTime: date, uploads: channel.uploads });\n        });\n      });\n    });\n  }\n}\n\nexport function syncPlaylists(playlistIds: string[], syncVideos: boolean, client: SyncClient, repo: SyncRepository): Promise<number> {\n  const promises = playlistIds.map(playlistId => syncPlaylist(playlistId, syncVideos, client, repo));\n  let sum = 0;\n  return Promise.all(promises).then(res => {\n    for (const num of res) {\n      sum = sum + num;\n    }\n    return sum;\n  });\n}\nexport async function syncPlaylist(playlistId: string, syncVideos: boolean, client: SyncClient, repo: SyncRepository, log?: (msg: any, ctx?: any) => void): Promise<number> {\n  try {\n    const res = await syncPlaylistVideos(playlistId, syncVideos, client, repo);\n    const playlist = await client.getPlaylist(playlistId);\n    playlist.itemCount = playlist.count;\n    playlist.count = res.count;\n    await repo.savePlaylist(playlist);\n    await repo.savePlaylistVideos(playlistId, res.videos);\n    return res.success;\n  } catch (err) {\n    if (log) {\n      log(err);\n    }\n    throw err;\n  }\n}\n\nexport interface VideoResult {\n  success?: number;\n  count?: number;\n  all?: number;\n  videos?: string[];\n  timestamp?: Date;\n}\nexport function syncVideosOfPlaylists(playlistIds: string[], syncVideos: boolean, saveCollection: boolean, client: SyncClient, repo: SyncRepository): Promise<number> {\n  let sum = 0;\n  if (saveCollection) {\n    const promises = playlistIds.map(id => syncPlaylistVideos(id, syncVideos, client, repo).then(r => repo.savePlaylistVideos(id, r.videos)));\n    return Promise.all(promises).then(res => {\n      for (const num of res) {\n        sum = sum + num;\n      }\n      return sum;\n    });\n  } else {\n    const promises = playlistIds.map(id => syncPlaylistVideos(id, syncVideos, client, repo));\n    return Promise.all(promises).then(res => {\n      for (const num of res) {\n        sum = sum + num.success;\n      }\n      return sum;\n    });\n  }\n}\nexport interface PlaylistResult {\n  count?: number;\n  all?: number;\n  videoCount?: number;\n  allVideoCount?: number;\n}\nexport async function syncChannelPlaylists(channelId: string, syncVideos: boolean, saveCollection: boolean, client: SyncClient, repo: SyncRepository): Promise<PlaylistResult> {\n  let nextPageToken = '';\n  let count = 0;\n  let all = 0;\n  let allVideoCount = 0;\n  while (nextPageToken !== undefined) {\n    const channelPlaylists = await client.getChannelPlaylists(channelId, 50, nextPageToken);\n    all = channelPlaylists.total;\n    count = count + channelPlaylists.list.length;\n    const playlistIds: string[] = [];\n    for (const p of channelPlaylists.list) {\n      playlistIds.push(p.id);\n      allVideoCount = allVideoCount + p.count;\n    }\n    nextPageToken = channelPlaylists.nextPageToken;\n    await repo.savePlaylists(channelPlaylists.list);\n    await syncVideosOfPlaylists(playlistIds, syncVideos, saveCollection, client, repo);\n  }\n  return { count, all, allVideoCount };\n}\nexport async function syncPlaylistVideos(playlistId: string, syncVideos: boolean, client: SyncClient, repo: SyncRepository): Promise<VideoResult> {\n  let nextPageToken = '';\n  let success = 0;\n  let count = 0;\n  let all = 0;\n  let newVideoIds: string[] = [];\n  while (nextPageToken !== undefined) {\n    const playlistVideos = await client.getPlaylistVideos(playlistId, 50, nextPageToken);\n    all = playlistVideos.total;\n    count = count + playlistVideos.list.length;\n    const videoIds = playlistVideos.list.map(item => item.id);\n    newVideoIds = newVideoIds.concat(videoIds);\n    const getVideos = syncVideos ? client.getVideos : undefined;\n    const r = await saveVideos(playlistVideos.list, getVideos, repo);\n    success = success + r;\n    nextPageToken = playlistVideos.nextPageToken;\n  }\n  return { success, count, all, videos: newVideoIds };\n}\nexport async function syncUploads(uploads: string, client: SyncClient, repo: SyncRepository, timestamp?: Date): Promise<VideoResult> {\n  let nextPageToken = '';\n  let success = 0;\n  let count = 0;\n  let all = 0;\n  let last: Date;\n  while (nextPageToken !== undefined) {\n    const playlistVideos = await client.getPlaylistVideos(uploads, 50, nextPageToken);\n    all = playlistVideos.total;\n    count = count + playlistVideos.list.length;\n    if (!last && playlistVideos.list.length > 0) {\n      last = playlistVideos.list[0].publishedAt;\n    }\n    const newVideos = getNewVideos(playlistVideos.list, timestamp);\n    nextPageToken = playlistVideos.list.length > newVideos.length ? undefined : playlistVideos.nextPageToken;\n    const r = await saveVideos(newVideos, client.getVideos, repo);\n    success = success + r;\n  }\n  return { count: success, all, timestamp: last };\n}\nexport function saveVideos(newVideos: PlaylistVideo[], getVideos?: (ids: string[], fields?: string[], noSnippet?: boolean) => Promise<Video[]>, repo?: SyncRepository): Promise<number> {\n  if (!newVideos || newVideos.length === 0) {\n    return Promise.resolve(0);\n  } else {\n    if (!repo || !getVideos) {\n      return Promise.resolve(newVideos.length);\n    } else {\n      const videoIds = newVideos.map(item => item.id);\n      return repo.getVideoIds(videoIds).then(ids => {\n        const newIds = notIn(videoIds, ids);\n        if (newIds.length === 0) {\n          return Promise.resolve(0);\n        } else {\n          return getVideos(newIds).then(videos => {\n            if (videos && videos.length > 0) {\n              return repo.saveVideos(videos).then(r => videos.length);\n            } else {\n              return Promise.resolve(0);\n            }\n          });\n        }\n      });\n    }\n  }\n}\n\nexport interface CacheItem<T> {\n  item: T;\n  timestamp: Date;\n}\nexport interface Cache<T> {\n  [key: string]: CacheItem<T>;\n}\nexport function removeCache<T>(cache: Cache<T>, max: number): number {\n  let keys = Object.keys(cache);\n  if (keys.length <= max) {\n    return 0;\n  }\n  let lastKey = '';\n  let count = 0;\n  while (true) {\n    let last = new Date();\n    for (const key of keys) {\n      const obj = cache[key];\n      if (obj.timestamp.getTime() > last.getTime()) {\n        lastKey = key;\n        last = obj.timestamp;\n      }\n    }\n    delete cache[lastKey];\n    count = count + 1;\n    keys = Object.keys(cache);\n    if (keys.length <= max) {\n      return count;\n    }\n  }\n}\n\nexport const nothumbnail = 'https://i.ytimg.com/img/no_thumbnail.jpg';\nexport function formatThumbnail<T extends Thumbnail>(t: T[]): T[] {\n  if (!t) {\n    return t;\n  }\n  for (const obj of t) {\n    if (!obj.thumbnail) {\n      obj.thumbnail = nothumbnail;\n    }\n    if (!obj.mediumThumbnail) {\n      obj.mediumThumbnail = nothumbnail;\n    }\n    if (!obj.highThumbnail) {\n      obj.highThumbnail = nothumbnail;\n    }\n  }\n  return t;\n}\nexport function formatBigThumbnail<T extends Thumbnail & BigThumbnail>(t: T[]): T[] {\n  if (!t) {\n    return t;\n  }\n  for (const obj of t) {\n    if (!obj.thumbnail) {\n      obj.thumbnail = nothumbnail;\n    }\n    if (!obj.mediumThumbnail) {\n      obj.mediumThumbnail = nothumbnail;\n    }\n    if (!obj.highThumbnail) {\n      obj.highThumbnail = nothumbnail;\n    }\n    if (!obj.standardThumbnail) {\n      obj.standardThumbnail = nothumbnail;\n    }\n    if (!obj.maxresThumbnail) {\n      obj.maxresThumbnail = nothumbnail;\n    }\n  }\n  return t;\n}\ninterface Id {\n  id?: string;\n}\nexport function decompress<T extends Id & Thumbnail>(items: T[]): T[] {\n  for (const i of items) {\n    i.mediumThumbnail = `https://i.ytimg.com/vi/${i.id}/mqdefault.jpg`;\n    i.highThumbnail = `https://i.ytimg.com/vi/${i.id}/hqdefault.jpg`;\n    i.thumbnail = `https://i.ytimg.com/vi/${i.id}/default.jpg`;\n    i['standardThumbnail'] = `https://i.ytimg.com/vi/${i.id}/sddefault.jpg`;\n    i['maxresThumbnail'] = `https://i.ytimg.com/vi/${i.id}/maxresdefault.jpg`;\n  }\n  return items;\n}\nexport const thumbnails = ['thumbnail', 'mediumThumbnail', 'highThumbnail', 'maxresThumbnail', 'standardThumbnail'];\nexport const thumbnailNames = ['default', 'mqdefault', 'hqdefault', 'sddefault', 'maxresdefault'];\nexport function decompressItems<T>(items: T[]): T[] {\n  for (const item of items) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < thumbnails.length; i++) {\n      const a = thumbnails[i];\n      if (item[a] && item[a].length > 0 && item[a].length < 36) {\n        const u = `https://i.ytimg.com/vi/${item[a]}/${thumbnailNames[i]}.jpg`;\n        item[a] = u;\n      }\n    }\n  }\n  return items;\n}\ninterface PublishedAt {\n  publishedAt?: Date;\n}\nexport function formatPublishedAt<T extends PublishedAt>(li: T[]): T[] {\n  if (li && li.length > 0) {\n    for (const i of li) {\n      if (i.publishedAt) {\n        i.publishedAt = new Date(i.publishedAt);\n      }\n    }\n  }\n  return li;\n}\nexport function getSubcriptions(request: HttpRequest, key: string, channelId?: string, mine?: boolean, max?: number, nextPageToken?: string | number): Promise<ListResult<Channel>> {\n  const maxResults = (max && max > 0 ? max : 4);\n    const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n    const mineStr = (mine ? `&mine=${mine}` : '');\n    const channel = (channelId && channelId.length > 0) ? `&channelId=${channelId}` : '';\n    const url = `https://youtube.googleapis.com/youtube/v3/subscriptions?key=${key}${mineStr}${channel}&maxResults=${maxResults}${pageToken}&part=snippet`;\n    return request.get<YoutubeListResult<ListItem<string, ChannelSnippet, ChannelDetail>>>(url).then(res => {\n      const r: ListResult<Channel> = {\n        list:  fromYoutubeChannels(res),\n        nextPageToken: res.nextPageToken,\n      };\n      return r;\n    });\n}\nexport function getCommentThreads(request: HttpRequest, key: string, videoId: string, sort?: CommentOrder, max?: number, nextPageToken?: string): Promise<ListResult<CommentThead>> {\n  const orderParam = (sort === 'relevance' ? `&order=${sort}` : '');\n  const maxResults = (max && max > 0 ? max : 20); // maximum is 50\n  const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n  const url = `https://www.googleapis.com/youtube/v3/commentThreads?key=${key}&videoId=${videoId}${orderParam}&maxResults=${maxResults}${pageToken}&part=snippet`;\n  return request.get<YoutubeListResult<ListItem<string, TopLevelCommentSnippet, any>>>(url).then(res => fromYoutubeCommentThreads(res));\n}\nexport function getComments(request: HttpRequest, key: string, id: string, max?: number, nextPageToken?: string): Promise<ListResult<Comment>> {\n  const maxResults = (max && max > 0 ? max : 20); // maximum is 50\n  const pageToken = (nextPageToken ? `&pageToken=${nextPageToken}` : '');\n  const url = `https://www.googleapis.com/youtube/v3/comments?key=${key}&parentId=${id}&maxResults=${maxResults}${pageToken}&part=snippet`;\n  return request.get<YoutubeListResult<ListItem<string, CommentSnippet, any>>>(url).then(res => fromYoutubeComments(res));\n}\nexport function fromYoutubeCommentThreads(res: YoutubeListResult<ListItem<string, TopLevelCommentSnippet, any>>): ListResult<CommentThead> {\n  const list = res.items.filter(i => i.snippet).map(item => {\n    const snippet = item.snippet;\n    const c = snippet.topLevelComment;\n    const sn = c.snippet;\n    const i: CommentThead = {\n      id: item.id,\n      videoId: snippet.videoId,\n      textDisplay: sn.textDisplay,\n      textOriginal: sn.textOriginal,\n      authorDisplayName: sn.authorDisplayName,\n      authorProfileImageUrl: sn.authorProfileImageUrl,\n      authorChannelUrl: sn.authorProfileImageUrl,\n      authorChannelId: sn.authorChannelId.value,\n      canRate: sn.canRate,\n      viewerRating: sn.viewerRating,\n      likeCount: sn.likeCount,\n      publishedAt: sn.publishedAt,\n      updatedAt: sn.updatedAt,\n      canReply: snippet.canReply,\n      totalReplyCount: snippet.totalReplyCount,\n      isPublic: snippet.isPublic\n    };\n    return i;\n  });\n  return { list, total: res.pageInfo.totalResults, limit: res.pageInfo.resultsPerPage, nextPageToken: res.nextPageToken };\n}\nexport function fromYoutubeComments(res: YoutubeListResult<ListItem<string, CommentSnippet, any>>): ListResult<Comment> {\n  const list = res.items.filter(i => i.snippet).map(item => {\n    const snippet = item.snippet;\n    const i: Comment = {\n      id: item.id,\n      parentId: snippet.parentId,\n      textDisplay: snippet.textDisplay,\n      textOriginal: snippet.textOriginal,\n      authorDisplayName: snippet.authorDisplayName,\n      authorProfileImageUrl: snippet.authorProfileImageUrl,\n      authorChannelUrl: snippet.authorProfileImageUrl,\n      authorChannelId: snippet.authorChannelId.value,\n      canRate: snippet.canRate,\n      viewerRating: snippet.viewerRating,\n      likeCount: snippet.likeCount,\n      publishedAt: snippet.publishedAt,\n      updatedAt: snippet.updatedAt\n    };\n    return i;\n  });\n  return { list, total: res.pageInfo.totalResults, limit: res.pageInfo.resultsPerPage, nextPageToken: res.nextPageToken };\n}\n","import axios from 'axios';\nimport {HttpRequest} from 'axios-core';\nimport {VideoClient, VideoService} from './video-plus';\n\nconst httpRequest = new HttpRequest(axios);\nclass ApplicationContext {\n  public videoService: VideoService;\n  getVideoService(): VideoService {\n    if (!this.videoService) {\n      this.videoService = new VideoClient('http://localhost:7070/tube', httpRequest, 3, 3, 'AIzaSyDVRw8jjqyJWijg57zXSOMpUArlZGpC7bE');\n    }\n    return this.videoService;\n  }\n}\n\nexport const context = new ApplicationContext();\n","import {MouseEvent} from 'react';\n\nexport const viewVideo = (videoId: string, e: MouseEvent<HTMLAnchorElement|HTMLButtonElement>, history: any) => {\n  if (e && e.preventDefault) {\n    e.preventDefault();\n  }\n  if (history && history.push && typeof history.push === 'function') {\n    history.push(`/videos/${videoId}`);\n  }\n};\nexport const viewPlaylist = (playlistId: string, e: MouseEvent<HTMLAnchorElement|HTMLButtonElement>, history: any) => {\n  if (e && e.preventDefault) {\n    e.preventDefault();\n  }\n  if (history && history.push && typeof history.push === 'function') {\n    history.push(`/videos/playlists/${playlistId}`);\n  }\n};\nexport const viewChannel = (channelId: string, e: MouseEvent<HTMLAnchorElement|HTMLButtonElement>, history: any) => {\n  if (e && e.preventDefault) {\n    e.preventDefault();\n  }\n  if (history && history.push && typeof history.push === 'function') {\n    history.push(`/videos/channels/${channelId}`);\n  }\n};\n","import * as React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { storage } from 'uione';\nimport { context } from '../app';\nimport { viewPlaylist } from '../event';\nimport { buildShownItems, Playlist } from '../video-plus';\n\nconst max = 12;\nconst playlistFields = ['id', 'title', 'publishedAt', 'mediumThumbnail', 'count', 'highThumbnail'];\n\nconst ChannelPlayLists = () => {\n  const { id } = useParams();\n  // const resource = storage.resource().resource();\n  const history = useHistory();\n  const videoService = context.getVideoService();\n  const [keyword, setKeyword] = React.useState<string>('');\n  const [playlists, setPlaylists] = React.useState<Playlist[]>([]);\n  const [allPlaylists, setAllPlaylists] = React.useState<Playlist[]>([]);\n  const [nextPageToken, setNextPageToken] = React.useState<string>('');\n\n  React.useEffect(() => {\n    (async () => {\n      const res = await videoService.getChannelPlaylists(id, 24, undefined, playlistFields);\n      const items = buildShownItems(keyword, res.list);\n      setAllPlaylists(res.list);\n      setPlaylists(items);\n      setNextPageToken(res.nextPageToken);\n    })();\n  }, []);\n\n  const handleLoadMore = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (e) {\n      e.preventDefault();\n    }\n    const res = await videoService.getChannelPlaylists(id, max, nextPageToken, playlistFields);\n    const newList = [...allPlaylists].concat(res.list);\n    const items = buildShownItems(keyword, newList);\n    setAllPlaylists(newList);\n    setPlaylists(items);\n    setNextPageToken(res.nextPageToken);\n  };\n  const keywordOnChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const word = e.target.value;\n    const items = buildShownItems(keyword, allPlaylists);\n    setPlaylists(items);\n    setKeyword(word);\n  };\n  return (\n    <div>\n      <form id='channelPlaylistsForm' name='channelPlaylistsForm'>\n        <section className='row search-group'>\n          <label className='col s12 search-input'>\n            <i className='btn-search' />\n            <input type='text'\n              id='keyword'\n              name='keyword'\n              onChange={keywordOnChanged}\n              value={keyword}\n              maxLength={40}\n              // placeholder={resource.filter_playlists}\n              />\n          </label>\n        </section>\n      </form>\n      <form className='list-result'>\n        <ul className='row list-view'>\n          {playlists && playlists.map((item, i) => {\n            return (\n              <li key={i} className='col s12 m6 l4 xl3 video'>\n                <section>\n                  <div className='cover' style={{ backgroundImage: `url('${item.highThumbnail}')` }}>\n                    <i>{item.count}</i>\n                  </div>\n                  <a href='#' onClick={e => viewPlaylist(item.id, e, history)}>{item.title}</a>\n                  <p className='date'>{item.publishedAt.toDateString()}</p>\n                </section>\n              </li>\n            );\n          })}\n        </ul>\n        {keyword.length === 0 && nextPageToken && <button type='submit' id='btnMore' name='btnMore' className='btn-more' onClick={handleLoadMore}>Load more</button>}\n      </form>\n    </div>\n  );\n};\nexport default ChannelPlayLists;\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { storage } from 'uione';\nimport { context } from '../app';\nimport { Channel } from '../video-plus';\nimport './index.scss';\nexport default function ChannelSubscriptions() {\n  // const resource = storage.resource().resource();\n  const {id} = useParams();\n  const videoService = context.getVideoService();\n  const [data, setData] = React.useState<Channel[]>([]);\n  const [nextPageToken, setNextPageToken] = React.useState<string>();\n  React.useEffect(() => {\n    (async () => {\n      const res = await videoService.getSubcriptions(id, false, 3, undefined);\n      setData(res.list);\n      setNextPageToken(res.nextPageToken);\n    })();\n  }, []);\n\n  const loadMore = async () => {\n    if (nextPageToken) {\n      const res = await videoService.getSubcriptions(id, false, 3, nextPageToken);\n      setData([...data, ...res.list]);\n      setNextPageToken(res.nextPageToken);\n    }\n  };\n\n  return(\n    <div className='channel-subscriptions'>\n      <h3 className='title'>Subscriptions</h3>\n      <div className='containers'>\n        { data.map((x, i) => {\n          return(\n            <div className='box' key={i}>\n              <div className='avatar'>\n                <img\n                  src={x.mediumThumbnail}\n                  alt='Avatar Channel'\n                />\n              </div>\n              <div className='title-channel'>{x.title}</div>\n            </div>\n          );\n        })}\n      </div>\n      {nextPageToken && <button type='submit' id='btnMore' name='btnMore' className='btn-more' onClick={loadMore}>Load more</button>}\n    </div>\n  );\n}\n\n\n","import * as React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { storage } from 'uione';\nimport { context } from '../app';\nimport { viewVideo } from '../event';\nimport { buildShownItems, PlaylistVideo } from '../video-plus';\n\nconst max = 12;\nconst videoFields = ['id', 'title', 'publishedAt', 'highThumbnail', 'definition', 'duration'];\n\nconst ChannelVideos = () => {\n  const { id } = useParams();\n  // const resource = storage.resource().resource();\n  const history = useHistory();\n  const videoService = context.getVideoService();\n  const [keyword, setKeyword] = React.useState<string>('');\n  const [videos, setVideos] = React.useState<PlaylistVideo[]>([]);\n  const [allVideos, setAllVideos] = React.useState<PlaylistVideo[]>([]);\n  const [nextPageToken, setNextPageToken] = React.useState<string>('');\n\n  React.useEffect(() => {\n    (async () => {\n      const res = await videoService.getChannelVideos(id, 24, undefined, videoFields);\n      const items = buildShownItems(keyword, res.list);\n      setAllVideos(res.list);\n      setVideos(items);\n      setNextPageToken(res.nextPageToken);\n    })();\n  }, []);\n\n  const handleLoadMore = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (e) {\n      e.preventDefault();\n    }\n    const res = await videoService.getChannelVideos(id, max, nextPageToken, videoFields);\n    const newList = [...allVideos].concat(res.list);\n    const items = buildShownItems(keyword, newList);\n    setAllVideos(newList);\n    setVideos(items);\n    setNextPageToken(res.nextPageToken);\n  };\n  const keywordOnChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const word = e.target.value;\n    const items = buildShownItems(keyword, allVideos);\n    setVideos(items);\n    setKeyword(word);\n  };\n  const formatToMinutes = (s: number) => {\n    return (s - (s %= 60)) / 60 + ':' + s;\n  };\n  return (\n    <div>\n      <form id='channelVideosForm' name='channelVideosForm'>\n        <section className='row search-group'>\n          <label className='col s12 search-input'>\n            <i className='btn-search' />\n            <input type='text'\n              id='keyword'\n              name='keyword'\n              onChange={keywordOnChanged}\n              value={keyword}\n              maxLength={40}\n              // placeholder={resource.filter_videos}\n              />\n          </label>\n        </section>\n      </form>\n      <form className='list-result'>\n        <ul className='row list-view'>\n          {videos && videos.map((item, i) => {\n            return (\n              <li key={i} className='col s12 m6 l4 xl3 video'>\n                <section>\n                  <div className='cover' style={{ backgroundImage: `url('${item.highThumbnail}')` }}>\n                    {item.definition > 4 && <i>HD</i>}\n                  </div>\n                  {item.duration > 0 ? <p>{formatToMinutes(item.duration)}</p> : <p>Short Video</p>}\n                  <a href='#' onClick={e => viewVideo(item.id, e, history)}>{item.title}</a>\n                  <p className='date'>{item.publishedAt.toDateString()}</p>\n                </section>\n              </li>\n            );\n          })}\n        </ul>\n        {keyword.length === 0 && nextPageToken && <button type='submit' id='btnMore' name='btnMore' className='btn-more' onClick={handleLoadMore}>Load more</button>}\n      </form>\n    </div>\n  );\n};\nexport default ChannelVideos;\n","import * as React from 'react';\nimport './index.scss';\n\nconst PlayButtonCustom = () => {\n  return (\n    <a className='video-play-button'>\n      <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlnsXlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 104 104' enableBackground='new 0 0 104 104' xmlSpace='preserve'>\n        <path fill='rgba(255, 255, 255, 0.8)' strokeWidth={4} strokeMiterlimit={10} d='M26,35h52L52,81L26,35z' />\n        <circle className='video-play-circle' fill='none' stroke='rgba(0,0,0,0.7)' strokeWidth={4} strokeMiterlimit={10} cx={52} cy={52} r={50} />\n      </svg>\n    </a>\n  );\n};\nexport default PlayButtonCustom;\n","import * as React from 'react';\nimport {context} from 'src/video/app';\nimport {PlaylistVideo} from 'src/video/video-plus';\nimport PlayButtonCustom from '../PlayButton';\nimport './index.scss';\n\nconst CustomSlideShow = (props: any) => {\n  const {id, thumbnail, thumbnailSize} = props;\n  const videoService = context.getVideoService();\n  const getPlaylist = videoService.getPlaylistVideos;\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const [play, setPlay] = React.useState(false);\n  const [videos, setVideos] = React.useState<PlaylistVideo[]>([]);\n  const [length, setLength] = React.useState(3);\n  const [fetching, setFetching] = React.useState(false);\n\n  React.useEffect(() => {\n    (async() => {\n      if (id && fetching) {\n        const res = await getPlaylist(id, 3);\n        setVideos(res.list);\n        setLength(res.list.length);\n      }\n    })();\n  }, [fetching]);\n\n  const next = () => {\n    if (currentIndex < (length - 1)) {\n        setCurrentIndex(prevState => prevState + 1);\n    }\n    setPlay(false);\n  };\n\n  const prev = () => {\n    if (currentIndex > 0) {\n        setCurrentIndex(prevState => prevState - 1);\n    }\n    setPlay(false);\n  };\n\n  const handlePlayVideo = () => {\n    setPlay(true);\n  };\n\n  const handleFetch = () => {\n    setFetching(true);\n  };\n\n  return (\n      <div className='carousel-container cover' style={{width: '100%'}} onMouseEnter={handleFetch}>\n          <div className='carousel-wrapper'>\n            <a onClick={prev} className='left-arrow'>\n              &#10094;\n            </a>\n            {\n              !play && <div className='play-container' onClick={handlePlayVideo}>\n                <PlayButtonCustom />\n              </div>\n            }\n            <div className='carousel-content-wrapper'>\n              <div className='carousel-content' style={{ transform: `translateX(-${currentIndex * 100}%)` }}>\n                {\n                  videos && videos.length > 0 ? (\n                    videos.map((item, index) => (\n                      currentIndex === index && play ? (\n                        <iframe\n                        key={item.title}\n                        width='200'\n                        height='200'\n                        src={currentIndex === index ? `https://www.youtube.com/embed/${item.id}?autoplay=1` : `https://www.youtube.com/embed/${item.id}`}\n                        title='YouTube video player'\n                        allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;'\n                        />\n                      ) : (\n                        <img className='img-thumb' key={item.title} src={item[thumbnailSize]} />\n                      )\n                    ))\n                  ) : (\n                    <img src={thumbnail} />\n                  )\n                }\n              </div>\n            </div>\n            <a onClick={next} className='right-arrow'>\n              &#10095;\n            </a>\n          </div>\n      </div>\n  );\n};\nexport default CustomSlideShow;\n","import * as React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { context } from '../app';\nimport SlideShow from '../components/SlideShow';\nimport { viewPlaylist, viewVideo } from '../event';\nimport { Playlist, PlaylistVideo } from '../video-plus';\n\nconst videoFields = ['id', 'title', 'publishedAt', 'highThumbnail', 'definition', 'duration'];\nconst playlistFields = ['id', 'title', 'publishedAt', 'mediumThumbnail', 'count'];\n\nconst Home = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  const videoService = context.getVideoService();\n  const [videos, setVideos] = React.useState<PlaylistVideo[]>([]);\n  const [playlists, setPlaylists] = React.useState<Playlist[]>([]);\n\n  React.useEffect(() => {\n    (() => {\n      videoService.getChannelVideos(id, 12, undefined, videoFields).then(res => setVideos(res.list));\n      videoService.getChannelPlaylists(id, 12, undefined, playlistFields).then(res => setPlaylists(res.list));\n    })();\n  }, []);\n  const formatToMinutes = (s: number) => {\n    return (s - (s %= 60)) / 60 + ':' + s;\n  };\n  return (\n    <div>\n      <ul className='list-view horizon'>\n        {videos && videos.map((item, i) => {\n          return (\n            <li key={i} className='video'>\n              <div className='cover' style={{ backgroundImage: `url('${item.highThumbnail}')` }}>\n                {item.definition > 4 && <i>HD</i>}\n              </div>\n              {item.duration > 0 ? <p>{formatToMinutes(item.duration)}</p> : <p>Short Video</p>}\n              <a href='#' onClick={e => viewVideo(item.id, e, history)}>{item.title}</a>\n              <p className='date'>{item.publishedAt.toDateString()}</p>\n            </li>\n          );\n        })}\n      </ul>\n      <ul className='list-view horizon'>\n        {playlists && playlists.map((item, i) => {\n          return (\n            <li key={i} className='video'>\n              <div className='cover'>\n                <i style={{zIndex: 11}}>{item.count}</i>\n                <SlideShow id={item.id} thumbnail={item.mediumThumbnail} thumbnailSize='mediumThumbnail' />\n              </div>\n              <a href='#' onClick={e => viewPlaylist(item.id, e, history)}>{item.title}</a>\n              <p className='date'>{item.publishedAt.toDateString()}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\nexport default Home;\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { context } from '../app';\nimport { Channel } from '../video-plus/models';\nimport ChannelPlayLists from './channel-playlists';\nimport ChannelSubscriptions from './channel-subscription';\nimport ChannelVideos from './channel-videos';\nimport Home from './home';\n\nimport './index.scss';\n\nconst channelFields = ['id', 'title', 'mediumThumbnail'];\n\nexport default function ChannelPage() {\n  const videoService = context.getVideoService();\n  const { id } = useParams();\n  const tabName = ['home', 'videos', 'playlists', 'channels'];\n  const [selectTab, setSelectTab] = React.useState(0);\n  const [channel, setChannel] = React.useState<Channel>();\n\n  React.useEffect(() => {\n    (async () => {\n      const res = await videoService.getChannel(id, channelFields);\n      setChannel(res);\n    })();\n  }, []);\n  console.log({channel});\n  return (\n    <div className='channel-page'>\n      {\n        channel && (\n          <div className='channel-information'>\n            <img\n              className='channel-avatar'\n              src={channel.mediumThumbnail}\n              alt='Channel avatar'\n              width='80'\n              height='80'\n            />\n            <div className='inform-detail'>\n              <div className='container'>\n                <div className='channel-name'>\n                  {channel.title}\n                </div>\n              </div>\n            </div>\n          </div>\n        )\n      }\n      <div className='tabs'>\n        {tabName.map((item, index) =>\n          <Tab\n            key={index}\n            tabId={index}\n            tabName={item}\n            getState={selectTab}\n            setState={setSelectTab}\n          />\n        )}\n      </div>\n      {selectTab === 0 && <Home />}\n      {selectTab === 1 && <ChannelVideos />}\n      {selectTab === 2 && <ChannelPlayLists />}\n      {selectTab === 3 && <ChannelSubscriptions />}\n    </div>\n  );\n}\n\nconst Tab = (props) => {\n  const { tabId, getState, setState, tabName } = props;\n  const handleOnClick = (id) => {\n    setState(id);\n  };\n  return (\n    <div>\n      <button className={`tab ${getState === tabId && 'tab-actived'}`}\n        onClick={() => handleOnClick(tabId)}\n      >\n        {tabName.toLocaleUpperCase()}\n      </button>\n    </div>\n  );\n};\n\n","import * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { context } from 'src/video/app';\nimport { Playlist } from 'src/video/video-plus';\nimport SlideShow from '../SlideShow';\n\nconst PlayListsHorizontal = (props: { channelId: string }) => {\n  const history = useHistory();\n  const videoService = context.getVideoService();\n  const getChannelPlaylists = videoService.getChannelPlaylists;\n  const [playlists, setPlaylists] = React.useState<Playlist[]>([]);\n\n  React.useEffect(() => {\n    (async () => {\n      if (props.channelId) {\n        const res = await getChannelPlaylists(props.channelId);\n        setPlaylists(res.list);\n      }\n    })();\n  }, []);\n\n  const view = (e: any, id: string) => {\n    e.preventDefault();\n    history.push(`channels/${id}`);\n  };\n  return (\n    <ul className='list-view horizon'>\n      {playlists && playlists.map((item) => (\n        <li key={item.id} className='video'>\n          <div className='cover'>\n            <SlideShow id={item.id} thumbnail={item.mediumThumbnail} thumbnailSize='mediumThumbnail' />\n          </div>\n          <h4 onClick={e => view(e, item.channelId)}>{item.title}</h4>\n        </li>\n      )\n      )}\n    </ul>\n  );\n};\nexport default PlayListsHorizontal;\n","import * as React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {storage} from 'uione';\nimport {context} from './app';\nimport PlayListsHorizontal from './components/PlayListsHorizontal';\nimport {Channel} from './video-plus/models';\n\nconst ChannelsForm = () => {\n  // const resource = storage.resource().resource();\n  const history = useHistory();\n  const videoService = context.getVideoService();\n  const [channels, setChannels] = React.useState<Channel[]>([]);\n\n  React.useEffect(() => {\n    // const ids = ['UCH5_L3ytGbBziX0CLuYdQ1Q', 'UCWu91J5KWEj1bQhCBuGeJxw', 'UCq3Ci-h945sbEYXpVlw7rJg', 'UCBkqDNqao03ldC3u78-Pp8g', 'UCsooa4yRKGN_zEE8iknghZA', 'UCZ4AMrDcNrfy3X6nsU8-rPg'];\n    const ids = ['UCH5_L3ytGbBziX0CLuYdQ1Q', 'UCBkqDNqao03ldC3u78-Pp8g', 'UCsooa4yRKGN_zEE8iknghZA', 'UCZ4AMrDcNrfy3X6nsU8-rPg', 'UCK7tptUDHh-RYDsdxO1-5QQ', 'UCFMkPeE8jiPirJMv9kttuIg', 'UCQMyhrt92_8XM0KgZH6VnRg', 'UCQD-0MjUbDBwm2UTVYr0Dag', 'UCKMnl27hDMKvch--noWe5CA', 'UCNIuvl7V8zACPpTmmNIqP2A'];\n    videoService.getChannels(ids).then(res => setChannels(res));\n  }, []);\n  const view = (e: any, id: string) => {\n    e.preventDefault();\n    history.push(`channels/${id}`);\n  };\n  return (\n    <div className='view-container'>\n        {/* <header>\n          <h2>{resource.welcome_title}</h2>\n        </header> */}\n        <div>\n          <form id='channelsForm' name='channelsForm'>\n            <section className='row search-group'>\n              <label className='col s12 search-input'>\n                <i className='btn-search' />\n                <input type='text'\n                  id='keyword'\n                  name='keyword'\n                  maxLength={40}\n                  // placeholder={resource.role_assignment_search_user}\n                  />\n              </label>\n            </section>\n          </form>\n          {\n            channels && channels.map(c => (\n              <form key={c.id} className='list-result'>\n                <h3 style={{paddingLeft: '20px'}} onClick={e => view(e, c.id)}>{c.title}</h3>\n                <PlayListsHorizontal channelId={c.id}/>\n              </form>\n            ))\n          }\n        </div>\n      </div>\n  );\n};\nexport default ChannelsForm;\n","import * as React from 'react';\n\nexport function TabCategory(props) {\n  const {id, name, setSelectedTab} = props;\n  const handOnClick = () => {\n    setSelectedTab(id);\n  };\n  return(\n      <li className='tab'>\n          <input\n            type='radio'\n            id={id}\n            name='tab'\n            onClick = {handOnClick}\n          />\n          <label className='tab-label' htmlFor={id}>{name}</label>\n      </li>\n  );\n}\n","import * as React from 'react';\nimport './index.scss';\nimport {TabCategory} from './TabCategory';\n\nexport default function CategoriesTab(props) {\n  const ref = React.useRef(null);\n  const {data, setSelectedTab} = props;\n  const [previousBtnHide, setPreviousBtnHide] = React.useState(true);\n  const [nextBtnHide, setNextBtnHide] = React.useState(false);\n\n  const scroll = (scrollOffset: number) => {\n    ref.current.scrollLeft += scrollOffset;\n    const {scrollLeft, scrollWidth, clientWidth} = ref.current;\n    const scrollMaxWidth = scrollWidth - clientWidth;\n    if (scrollLeft < scrollMaxWidth) {\n      setPreviousBtnHide(false);\n      setNextBtnHide(false);\n    }\n    if (scrollLeft === scrollMaxWidth) {\n      setNextBtnHide(true);\n    }\n    if (!scrollLeft) {\n      setPreviousBtnHide(true);\n    }\n  };\n\n  return (\n    <div className='categories-tab'>\n      <div className='container'>\n        <button\n          className={`btn ${previousBtnHide && 'btn-hide'}`}\n          onClick={() => scroll(-101)}\n        >\n          &#8249;\n        </button>\n        <div className ='tabs' ref={ref}>\n          {data.map((item) => {\n            if (item.assignable) {\n              return(\n                  <TabCategory\n                    key={item.id}\n                    id={item.id}\n                    name={item.title}\n                    setSelectedTab={setSelectedTab}\n                  />\n              );\n            }\n          })}\n        </div>\n        <button\n          className={`btn ${nextBtnHide && 'btn-hide'}`}\n          onClick={() => scroll(101)}\n        >\n          &#8250;\n        </button>\n      </div>\n    </div>\n  );\n}\n\n","import { locale } from 'locale-service';\nimport * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { getBrowserLanguage, storage } from 'uione';\nimport { context } from './app';\nimport CategoriesTab from './components/CategoriesTab';\nimport { viewChannel, viewVideo } from './event';\nimport { Video } from './video-plus';\nimport { ListResult, VideoCategory } from './video-plus/models';\n\nconst max = 48;\nconst videoFields = ['id', 'title', 'publishedAt', 'highThumbnail', 'channelId', 'channelTitle', 'categoryId', 'duration', 'definition'];\n\nfunction getRegion(): string {\n  const language = 'US'; // getBrowserLanguage();\n  const l = locale(language);\n  const region = (l ? l.countryCode : 'US');\n  return region;\n}\nconst HomeForm = () => {\n  // const resource = storage.resource().resource();\n  const history = useHistory();\n  const videoService = context.getVideoService();\n  const [videos, setVideos] = React.useState<Video[]>([]);\n  const [nextPageToken, setNextPageToken] = React.useState<string>('');\n  const [videoCategories, setVideoCategories] = React.useState<VideoCategory[]>([]);\n  const [selectedCategory, setSelectedCategory] = React.useState<string>(undefined);\n\n  React.useEffect(() => {\n    (async () => {\n      const region = getRegion();\n      const res = await videoService.getCagetories(region);\n      setVideoCategories(res);\n    })();\n  }, []);\n\n  React.useEffect(() => {\n    (async () => {\n      const region = getRegion();\n      let res: ListResult<Video>;\n      if (selectedCategory) {\n        res = await videoService.getPopularVideosByCategory(selectedCategory, max, undefined, videoFields);\n      } else {\n        res = await videoService.getPopularVideosByRegion(region, max, undefined, videoFields);\n      }\n      setNextPageToken(res.nextPageToken);\n      setVideos(res.list);\n    })();\n  }, [selectedCategory]);\n\n  const handleLoadMore = async () => {\n    const region = getRegion();\n    let res: ListResult<Video>;\n    if (selectedCategory) {\n      res = await videoService.getPopularVideosByCategory(selectedCategory, max, nextPageToken, videoFields);\n    } else {\n      res = await videoService.getPopularVideosByRegion(region, max, nextPageToken, videoFields);\n    }\n    setNextPageToken(res.nextPageToken);\n    const newList = [...videos].concat(res.list);\n    setVideos(newList);\n  };\n  const formatToMinutes = (s: number) => {\n    return (s - (s %= 60)) / 60 + ':' + s;\n  };\n  return (\n    <div className='view-container'>\n      {/* <header>\n        <h2>{resource.welcome_title}</h2>\n      </header> */}\n      <div className=''>\n        <form id='homeForm' name='homeForm'>\n          <section className='row search-group'>\n            <label className='col s12 search-input'>\n              <i className='btn-search' />\n              <input type='text'\n                maxLength={40}\n              />\n            </label>\n          </section>\n        </form>\n        <CategoriesTab\n          data={videoCategories}\n          setSelectedTab={setSelectedCategory}\n        />\n        <ul className='row list-view'>\n          {videos && videos.map((item, i) => {\n            return (\n              <li key={i} className='col s12 m6 l4 xl3 video'>\n                <section>\n                  <div className='cover' style={{ backgroundImage: `url('${item.highThumbnail}')` }}>\n                    {item.definition > 4 && <i>HD</i>}\n                  </div>\n                  {item.duration > 0 ? <p>{formatToMinutes(item.duration)}</p> : <p>Short Video</p>}\n                  <a href='#' onClick={e => viewVideo(item.id, e, history)}>{item.title}</a>\n                  <p><a href='#' onClick={e => viewChannel(item.channelId, e, history)}>{item.channelTitle}</a><i className='date'>{item.publishedAt.toDateString()}</i></p>\n                </section>\n              </li>\n            );\n          })}\n        </ul>\n        {nextPageToken && <button type='submit' id='btnMore' name='btnMore' className='btn-more' onClick={handleLoadMore}>Load more</button>}\n      </div>\n    </div>\n  );\n};\nexport default HomeForm;\n","import * as React from 'react';\n// import {getComment} from '../../services';\nimport { context } from '../../app';\nimport { Comment } from '../../video-plus';\n\ninterface CommentI {\n  commentId: string;\n  totalReplyCount?: number;\n  authorProfileImageUrl: string;\n  authorDisplayName: string;\n  likeCount: number;\n  textDisplay: string;\n}\n\nconst CommentItem = (\n  comment: CommentI\n) => {\n  const videoService = context.getVideoService();\n  const getComment = videoService.getComments;\n  const [comments, setComments] = React.useState<Comment[]>([]);\n  const [show, setShow] = React.useState(false);\n  const [nextPage, setNextPage] = React.useState<string>('');\n  React.useEffect(() => {\n    (async () => {\n      if (comment.commentId && show && !comments.length) {\n        const res = await getComment(comment.commentId, 5);\n        setNextPage(res.nextPageToken);\n        setComments(res.list);\n      }\n    })();\n  }, [show]);\n\n  const handleShowMore = () => {\n    setShow(!show);\n  };\n\n  const loadMore = async (id: string) => {\n    const res = await getComment(id, 5, nextPage);\n    setNextPage(res.nextPageToken);\n    const newList = [...comments].concat(res.list);\n    setComments(newList);\n  };\n\n  return (\n    <div className='row comments'>\n      <div className='col s12 m2 l2 xl1'>\n        <div className='img-user'>\n          <img src={comment.authorProfileImageUrl} />\n        </div>\n      </div>\n      <div className='col s12 m10 l10 xl11'>\n        <h3 className='author'>\n          {comment.authorDisplayName}\n        </h3>\n        <p dangerouslySetInnerHTML={{ __html: comment.textDisplay }} />\n        <h5>Like: {comment.likeCount}</h5>\n        {\n          comment.totalReplyCount > 0 && (\n            <>\n              <a className='view' onClick={handleShowMore}>{show ? 'Hide' : 'View'} {comment.totalReplyCount} replies</a>\n              {show && comments.map(c => (\n                <>\n                  <CommentItem\n                    key={c.id}\n                    commentId={c.id}\n                    authorProfileImageUrl={c.authorProfileImageUrl}\n                    authorDisplayName={c.authorDisplayName}\n                    likeCount={c.likeCount}\n                    textDisplay={c.textDisplay}\n                  />\n                </>\n              ))}\n            </>\n          )\n        }\n        {nextPage && <a className='view' onClick={() => loadMore(comment.commentId)}>View more replies</a>}\n      </div>\n    </div>\n  );\n};\nexport default CommentItem;\n","import * as React from 'react';\nimport { context } from '../../app';\nimport { CommentOrder, CommentThead } from '../../video-plus';\nimport CommentItem from './CommentItem.component';\nimport './index.scss';\ninterface CommentTools {\n  nextPageToken: string;\n  order: CommentOrder;\n}\n\nconst Comments = (props: { videoId: string }) => {\n  const [commentThreads, setCommentThreads] = React.useState<CommentThead[]>([]);\n  const [tools, setTools] = React.useState<CommentTools>({\n    nextPageToken: '',\n    order: 'time'\n  });\n  const videoService = context.getVideoService();\n  const getCommentThreads = videoService.getCommentThreads;\n  React.useEffect(() => {\n    (async () => {\n      const res = await getCommentThreads(props.videoId);\n      setTools((prev) => ({ ...prev, nextPageToken: res.nextPageToken }));\n      setCommentThreads(res.list);\n    })();\n  }, []);\n\n  const handleSort = async (e: { target: { value: string }; }) => {\n    const sort = e.target.value as CommentOrder;\n    const res = await getCommentThreads(props.videoId, sort);\n    setTools((prev) => ({ ...prev, order: sort, nextPageToken: res.nextPageToken }));\n    setCommentThreads(res.list);\n  };\n\n  const loadMore = async () => {\n    const res = await getCommentThreads(props.videoId, tools.order, 20, tools.nextPageToken);\n    setTools((prev) => ({ ...prev, nextPageToken: res.nextPageToken }));\n    const newThreads = [...commentThreads].concat(res.list);\n    setCommentThreads(newThreads);\n  };\n\n  return (\n    <div className='commentThreads-container'>\n      {\n        commentThreads && (\n          <div>\n            <div className='comments-bar'>\n              <h2 className='comments-total'>Comments</h2>\n              <select className='comments-sort' onChange={handleSort} defaultValue='relevance'>\n                <option value='relevance'>Top Comments</option>\n                <option value='time'>Newest First</option>\n              </select>\n            </div>\n            {\n              commentThreads.map(comment => (\n                <CommentItem\n                  key={comment.id}\n                  commentId={comment.id}\n                  totalReplyCount={comment.totalReplyCount}\n                  authorProfileImageUrl={comment.authorProfileImageUrl}\n                  authorDisplayName={comment.authorDisplayName}\n                  likeCount={comment.likeCount}\n                  textDisplay={comment.textDisplay}\n                />\n              ))\n            }\n            {\n              tools.nextPageToken && <button type='button' id='btnMore' name='btnMore' className='btn-more' onClick={loadMore}>Load More</button>\n            }\n          </div>\n        )\n      }\n    </div>\n  );\n};\nexport default Comments;\n","import * as React from 'react';\nimport { buildId, HistoryProps } from 'react-onex';\nimport { storage, StringMap } from 'uione';\nimport { context } from './app';\nimport Comments from './components/Comments';\nimport { viewChannel } from './event';\nimport { buildShownItems, ListResult, Playlist, PlaylistVideo } from './video-plus';\n\nconst max = 12;\nconst videoFields = ['id', 'title', 'publishedAt', 'highThumbnail', 'description', 'videoOwnerChannelId', 'videoOwnerChannelTitle', 'definition', 'duration'];\n\ninterface PlaylistState {\n  id?: string;\n  title?: string;\n  description?: string;\n  keyword: string;\n  playlist?: Playlist;\n  allVideos: PlaylistVideo[];\n  videos: PlaylistVideo[];\n  video?: PlaylistVideo;\n  nextPageToken?: string;\n}\n\nexport class PlaylistForm extends React.Component<HistoryProps, PlaylistState> {\n  constructor(props: HistoryProps) {\n    super(props);\n    this.back = this.back.bind(this);\n    // this.resource = storage.resource().resource();\n    const videoService = context.getVideoService();\n    this.getPlaylist = videoService.getPlaylist;\n    this.getPlaylistVideos = videoService.getPlaylistVideos;\n    this.state = {\n      keyword: '',\n      videos: [],\n      allVideos: [],\n      nextPageToken: ''\n    };\n  }\n  protected resource: StringMap = {};\n  getPlaylistVideos: (playlistId: string, max?: number, nextPageToken?: string, fields?: string[]) => Promise<ListResult<PlaylistVideo>>;\n  getPlaylist: (id: string) => Promise<Playlist>;\n  componentWillMount() {\n    window.addEventListener('scroll', () => console.log(document.scrollingElement.scrollHeight));\n    const id = buildId<string>(this.props);\n    this.getPlaylist(id).then(playlist => this.setState({playlist}));\n    this.getPlaylistVideos(id, 12, undefined, videoFields).then(res => this.setState({ videos: res.list, allVideos: res.list, nextPageToken: res.nextPageToken }));\n  }\n  back(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    if (e) {\n      e.preventDefault();\n    }\n    this.props.history.goBack();\n  }\n  keywordOnChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const keyword = e.target.value;\n    const { allVideos } = this.state;\n    const videos = buildShownItems(keyword, allVideos);\n    this.setState({ keyword, videos });\n  }\n  view = (e: any, video: PlaylistVideo) => {\n    this.setState({ video });\n  }\n\n  loadMore = async () => {\n    const id = buildId<string>(this.props);\n    if (this.state.nextPageToken !== undefined) {\n      const res = await this.getPlaylistVideos(id, max, this.state.nextPageToken, videoFields);\n      this.setState({ videos: this.state.videos.concat(res.list), nextPageToken: res.nextPageToken });\n    }\n  }\n  formatToMinutes = (s: number) => {\n    return (s - (s %= 60)) / 60 + ':' + s;\n  }\n  render() {\n    const resource = this.resource;\n    const { playlist, keyword, videos, video } = this.state;\n    const history = this.props.history;\n    const show: boolean = (video != null && video !== undefined);\n    return (\n      <div className='view-container'>\n        <header>\n          <button type='button' id='btnBack' name='btnBack' className='btn-back' onClick={this.back} />\n          <h2>{playlist && playlist.title}</h2>\n        </header>\n        <div className={show ? 'list-detail-container' : ''}>\n          <div className={show ? 'list-content' : ''}>\n            <form id='playlistForm' name='playlistForm'>\n              <section className='row search-group'>\n                <label className='col s12 search-input'>\n                  <i className='btn-search' />\n                  <input type='text'\n                    id='keyword'\n                    name='keyword'\n                    onChange={this.keywordOnChanged}\n                    value={keyword}\n                    maxLength={40}\n                    placeholder={resource.role_assignment_search_user} />\n                </label>\n              </section>\n            </form>\n            <form className='list-result'>\n              <ul className='row list-view'>\n                {videos && videos.map((item, i) => {\n                  return (\n                    <li key={i} className='col s12 m6 l4 xl3 video'>\n                      <section>\n                        <div className='cover' style={{ backgroundImage: `url('${item.highThumbnail}')` }}>\n                          {item.definition > 4 && <i>HD</i>}\n                        </div>\n                        {item.duration > 0 ? <p>{this.formatToMinutes(item.duration)}</p> : <p>Short Video</p>}\n                        <a href='#' onClick={e => this.view(e, item)}>{item.title}</a>\n                        <p><a href='#' onClick={e => viewChannel(item.channelId, e, history)}>{item.channelTitle}</a><i className='date'>{item.publishedAt.toDateString()}</i></p>\n                      </section>\n                    </li>\n                  );\n                })}\n              </ul>\n              {this.state.nextPageToken && <button type='button' id='btnMore' name='btnMore' className='btn-more' onClick={this.loadMore}>{resource.button_more}</button>}\n            </form>\n          </div>\n          {video && <div className='detail-content'>\n            <form id='videoForm' name='videoForm' style={{ minHeight: '100vh' }}>\n              <div className='video-container'>\n                <div>\n                  {/* <img src={video.standardThumbnail}/> */}\n                  <iframe\n                    width='100%'\n                    height='600'\n                    src={`https://www.youtube.com/embed/${video.id}`}\n                    title='Video Player'\n                    allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'\n                    allowFullScreen={true}\n                  />\n                </div>\n                <h3>{video.title}</h3>\n                <h4><a href='#' onClick={e => viewChannel(video.channelId, e, history)}>{video.channelTitle}</a><i className='date'>{video.publishedAt.toDateString()}</i></h4>\n                <p>{video.description}</p>\n              </div>\n            </form>\n            <Comments videoId={video.id} />\n          </div>}\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { storage } from 'uione';\nimport { context } from './app';\nimport { Duration, Item, ItemSM, ItemType, PlaylistVideo, SortType, Video } from './video-plus';\n\nconst max = 50;\nconst itemFields = ['id', 'title', 'publishedAt', 'highThumbnail', 'channelId', 'channelTitle', 'categoryId', 'publishTime', 'kind', 'duration', 'definition'];\nconst playlistFields = ['id', 'title', 'publishedAt', 'highThumbnail', 'channelId', 'channelTitle', 'categoryId', 'publishTime', 'kind'];\nconst channelFields = ['id', 'title', 'publishedAt', 'highThumbnail', 'title'];\n\nexport interface Filter {\n  type: ItemType;\n  duration: Duration;\n  order: SortType;\n  nextPageToken?: string;\n}\nconst SearchForm = () => {\n  const resource = storage.resource().resource();\n  const history = useHistory();\n  const { key } = useParams();\n  const videoService = context.getVideoService();\n  const [videos, setVideos] = React.useState<PlaylistVideo[]>([]);\n  const [keyword, setKeyword] = React.useState<string>(key);\n  const [filter, setFilter] = React.useState<Filter>({\n    type: 'any',\n    duration: 'any',\n    order: 'relevance',\n    nextPageToken: ''\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      const sm: ItemSM = { q: keyword };\n      const res = await videoService.searchVideos(sm, max, undefined, itemFields);\n      setFilter((prev) => ({ ...prev, nextPageToken: res.nextPageToken }));\n      setVideos(res.list);\n    })();\n  }, []);\n\n  const back = () => {\n    history.goBack();\n  };\n\n  const handleInput = (e: { target: { value: string } }) => {\n    setKeyword(e.target.value);\n  };\n\n  const handleSearch = () => {\n    history.push(`/videos/search/${keyword}`);\n  };\n\n  const handleFilterType = async (value: ItemType) => {\n    const type = value;\n    const sm: ItemSM = { q: keyword, type, sort: filter.order };\n    let res: any;\n    switch (type) {\n      case 'video':\n        res = await videoService.searchVideos(sm, max, undefined, itemFields);\n        break;\n      case 'playlist':\n        res = await videoService.searchPlaylists(sm, max, undefined, playlistFields);\n        break;\n      case 'channel':\n        res = await videoService.searchChannels(sm, max, undefined, channelFields);\n        break;\n      default:\n        res = await videoService.searchVideos(sm, max, undefined, itemFields);\n        break;\n    }\n    setFilter((pre) => ({ ...pre, type, duration: 'any', nextPageToken: res.nextPageToken }));\n    setVideos(res.list);\n  };\n\n  const handleFilterDuration = async (value: Duration) => {\n    const videoDuration = value;\n    const sm: ItemSM = { q: keyword, type: filter.type, duration: videoDuration, sort: filter.order };\n    const res = await videoService.searchVideos(sm, max, filter.nextPageToken, itemFields);\n    setFilter((pre) => ({ ...pre, duration: videoDuration, nextPageToken: res.nextPageToken }));\n    setVideos(res.list);\n  };\n\n  const handleFilterOrder = async (e: { target: { value: string; }; }) => {\n    const order = e.target.value as SortType;\n    const sm: ItemSM = { q: keyword, type: filter.type, duration: filter.duration, sort: order };\n    let res: any;\n    switch (sm.type) {\n      case 'video':\n        res = await videoService.searchVideos(sm, max, undefined, itemFields);\n        break;\n      case 'playlist':\n        res = await videoService.searchPlaylists(sm, max, undefined, itemFields);\n        break;\n      case 'channel':\n        res = await videoService.searchChannels(sm, max, undefined, itemFields);\n        break;\n      default:\n        res = await videoService.searchVideos(sm, max, undefined, itemFields);\n        break;\n    }\n    setFilter((pre) => ({ ...pre, order: sm.sort, nextPageToken: res.nextPageToken }));\n    setVideos(res.list);\n  };\n\n  const handleLoadMore = async () => {\n    const sm: ItemSM = {\n      q: keyword, type: filter.type, duration: filter.duration, sort: filter.order\n    };\n    let res: any;\n    console.log(filter.nextPageToken);\n    switch (sm.type) {\n      case 'video':\n        res = await videoService.searchVideos(sm, max, filter.nextPageToken, itemFields);\n        break;\n      case 'playlist':\n        res = await videoService.searchPlaylists(sm, max, filter.nextPageToken, itemFields);\n        break;\n      case 'channel':\n        res = await videoService.searchChannels(sm, max, filter.nextPageToken, itemFields);\n        break;\n      default:\n        res = await videoService.searchVideos(sm, max, filter.nextPageToken, itemFields);\n        break;\n    }\n    const newList = [...videos].concat(res.list);\n    setVideos(newList);\n    setFilter((pre) => ({ ...pre, nextPageToken: res.nextPageToken }));\n  };\n  const formatToMinutes = (s: number) => {\n    return (s - (s %= 60)) / 60 + ':' + s;\n  };\n  return (\n    <div className='view-container'>\n      <header>\n        <button type='button' id='btnBack' name='btnBack' className='btn-back' onClick={back} />\n        <h2>{resource.welcome_title}</h2>\n      </header>\n      <div className=''>\n        <form id='playlistForm' name='playlistForm'>\n          <section className='row search-group'>\n            <label className='col s12 search-input'>\n              <i className='btn-search' onClick={handleSearch} />\n              <input type='text'\n                onChange={handleInput}\n                value={keyword}\n                maxLength={40}\n              />\n            </label>\n          </section>\n        </form>\n        <div className='tool-bar'>\n          <ul className='row list-view'>\n            <li className='col s12 m3 l3 xl3'>\n              <select style={{ width: 150 }} value={filter.type} onChange={(e) => handleFilterType(e.target.value as ItemType)}>\n                <option value=''>Search Type</option>\n                <option value='video'>Video</option>\n                <option disabled={filter.duration !== 'any'} value='channel'>Channel</option>\n                <option disabled={filter.duration !== 'any'} value='playlist'>Play List</option>\n              </select>\n              <i onClick={() => handleFilterType('any')}>X</i>\n            </li>\n            <li className='col s12 m3 l3 xl3'>\n              <select disabled={(filter.type === 'channel' || filter.type === 'playlist')} value={filter.duration} onChange={(e) => handleFilterDuration(e.target.value as Duration)}>\n                <option value=''>Duration</option>\n                <option value='short'>Below 4 Minutes</option>\n                <option value='medium'>4-20 Minutes</option>\n                <option value='long'>Over 20 Minutes</option>\n              </select>\n              <i onClick={() => handleFilterDuration('any')}>X</i>\n            </li>\n            <li className='col s12 m3 l3 xl3'>\n              <select value={filter.order} onChange={handleFilterOrder}>\n                <option value=''>Order</option>\n                <option value='relevance'>Relevance</option>\n                <option value='date'>Date</option>\n                <option value='rating'>Rank</option>\n              </select>\n            </li>\n          </ul>\n        </div>\n        <ul className='row list-view'>\n          {videos && videos.map((item, i) => {\n            return (\n              <li\n                key={i}\n                className='col s12 m6 l4 xl3 card'\n              // onClick={e => this.view(e, item)}\n              >\n                <section>\n                  <div className='cover' style={{ backgroundImage: `url('${item.highThumbnail}')` }}>\n                    {item.definition > 4 && <i>HD</i>}\n                  </div>\n                  {item.duration && <p>{formatToMinutes(item.duration)}</p>}\n                  <h4>{item.title}</h4>\n                  <p><a href='#'>{item.channelTitle}</a>{item.publishedAt.toDateString()}</p>\n                </section>\n              </li>\n            );\n          })}\n        </ul>\n        {filter.nextPageToken && <button type='submit' id='btnMore' name='btnMore' className='btn-more' onClick={handleLoadMore}>{resource.button_more}</button>}\n      </div>\n    </div>\n  );\n};\nexport default SearchForm;\n","import * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Channel, Video } from 'src/video/video-plus';\nimport { context } from '../../app';\nimport './index.scss';\n\nconst channelFields = ['channelTitle', 'thumbnail'];\nexport default function VideoInfoBox (props: {data: Video}) {\n  const history = useHistory();\n  const [collapsed, setCollapsed] = React.useState(true);\n  const [channel, setChannel] = React.useState<Channel>();\n  const getChannel = context.videoService.getChannel;\n  React.useEffect(() => {\n    (async () => {\n      const res = await getChannel(props.data.channelId, channelFields);\n      setChannel(res);\n    })();\n  }, []);\n\n  const handleClick = () => {\n    setCollapsed(!collapsed);\n  };\n  const gotoChannel = (channelId: string) => {\n    history.push(`/videos/channels/${channelId}`);\n  };\n\n  return(\n    <div className='video-info-container'>\n      <div className='video-info'>\n        <h3 className='video-title'>{props.data.title}</h3>\n        <div className='publish'>{props.data.publishedAt.toDateString()}</div>\n      </div>\n      <div className='video-info-box'>\n        <div className='top'>\n          <img\n          src={channel && channel.thumbnail}\n          alt='Avatar'\n          width={48}\n          height={48}\n          />\n          <div className='channel-info'>\n            <h4 className='channel-name' onClick={() => gotoChannel(props.data.channelId)}>\n              {props.data.channelTitle}\n            </h4>\n          </div>\n        </div>\n        <div className= {`video-description ${collapsed ? 'collapsed' : 'extended' } `}>\n          <p dangerouslySetInnerHTML={{__html: props.data.description}}/>\n        </div>\n        <span\n          className='btn-show'\n          onClick={handleClick}\n        >\n          {collapsed ? 'SHOW MORE' : 'SHOW LESS'}\n        </span>\n      </div>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { storage } from 'uione';\nimport { context } from './app';\nimport Comments from './components/Comments';\nimport LoadMoreButton from './components/LoadMoreButton';\nimport VideoInfoBox from './components/VideoInfoBox';\nimport { Playlist, Video } from './video-plus';\n\nconst perPage = [12, 12, 12, 12];\nconst max = perPage.reduce((a, b) => a + b, 0);\nconst videoFields = ['id', 'title', 'publishedAt', 'mediumThumbnail', 'channelId', 'channelTitle', 'categoryId'];\n\nconst VideoForm = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  // const resource = storage.resource().resource();\n  const videoService = context.getVideoService();\n  const [listRelated, setListRelated] = React.useState<Playlist[]>([]);\n  const [video, setVideo] = React.useState<Video>();\n  const [page, setPage] = React.useState(1);\n  const [sliceData, setSliceData] = React.useState([]);\n\n  React.useEffect(() => {\n    (async () => {\n      if (id) {\n        const resVideo = await videoService.getVideo(id);\n        setVideo(resVideo);\n        const resRelatedVideo = await videoService.getRelatedVideos(id, max, undefined, videoFields);\n        setListRelated(resRelatedVideo.list);\n        setSliceData(resRelatedVideo.list.slice(0, perPage[0]));\n        setPage(page + 1);\n      }\n    })();\n  }, []);\n\n  const back = () => {\n    history.goBack();\n  };\n\n  const loadMore =  () => {\n    const begin = (page - 1) * perPage[page - 1];\n    const end = page * perPage[page - 1];\n    setSliceData([...sliceData, ...listRelated.slice(begin, end)]);\n    setPage(page + 1);\n  };\n\n  return (\n    <div className='view-container'>\n      <header>\n        <button type='button' id='btnBack' name='btnBack' className='btn-back' onClick={back} />\n        <h2>{video && video.title}</h2>\n      </header>\n      <div className='row list-view'>\n        <div className='col s12 m12 l9 xl9'>\n          <form id='videoForm' name='videoForm' style={{ paddingTop: 8 }}>\n            <div className='video-container'>\n              <div>\n                <iframe\n                  width='100%'\n                  height='600'\n                  src={`https://www.youtube.com/embed/${id}`}\n                  title='Video Player'\n                  allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'\n                  allowFullScreen={true}\n                />\n              </div>\n              {\n                video && <VideoInfoBox data={video}/>\n              }\n            </div>\n          </form>\n          <Comments videoId={id} />\n        </div>\n        <div className='col s12 m12 l3 xl3'>\n          <form className='list-result'>\n            <ul className='list-view'>\n              {sliceData && sliceData.map((item, i) => {\n                return (\n                  <li key={i} className='card'>\n                    <section>\n                      <div className='cover' style={{ backgroundImage: `url('${item.highThumbnail}')` }} />\n                      <h4>{item.title}</h4>\n                    </section>\n                  </li>\n                );\n              })}\n            </ul>\n            {page - 1 !== perPage.length && <button type='button' id='btnMore' name='btnMore' className='btn-more' onClick={loadMore}>Load more</button>}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default VideoForm;\n","import * as H from 'history';\nimport * as React from 'react';\nimport { Route, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport ChannelPage from './channel-page/index';\nimport { ChannelPlaylistForm } from './channel-playlists';\nimport ChannelsForm from './channels';\nimport HomeForm from './home';\nimport { PlaylistForm } from './playlist';\nimport SearchForm from './search';\nimport VideoForm from './video';\ninterface AppProps {\n  history: H.History;\n  setGlobalState: (data: any) => void;\n}\n\nclass StatelessApp extends React.Component<AppProps & RouteComponentProps<any>, {}> {\n  render() {\n    return (\n      <React.Fragment>\n        <Route path={this.props.match.url + ''} exact={true} component={HomeForm} />\n        <Route path={this.props.match.url + '/search/:key'} exact={true} component={SearchForm} />\n        <Route path={this.props.match.url + '/channels'} exact={true} component={ChannelsForm} />\n        <Route path={this.props.match.url + '/channels/:id'} exact={true} component={ChannelPage} />\n        <Route path={this.props.match.url + '/playlists/:id'} exact={true} component={PlaylistForm} />\n        <Route path={this.props.match.url + '/:id'} exact={true} component={VideoForm} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst VideoRoutes = compose(\n  withRouter,\n)(StatelessApp);\nexport default VideoRoutes;\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport VideoRoutes from './video/routes';\n\nfunction App() {\n\n  return (\n    <Switch>\n      <Route path='/videos' component={VideoRoutes} />\n      <Route path='/' component={VideoRoutes} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\nimport App from './App';\nimport './assets/css/styles.scss';\nimport './assets/fonts/font-awesome-4.7.0/css/font-awesome.min.css';\nimport './assets/fonts/material-icon/css/material-icons.css';\nimport './assets/fonts/Roboto/font.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst renderReactDom = () => {\n  ReactDOM.render(\n      <HashRouter>\n        <App />\n      </HashRouter>,\n    document.getElementById('root')\n  );\n};\n// @ts-ignore: Unreachable code error\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}